<?xml version="1.0" encoding="UTF-8"?>

<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec_gt-intro" permid="HLu">
  <title>Definitions</title>
  <investigation permid="LpU">
    <p permid="nbF">
      Which (if any) of the graphs below are the same?
    </p>

    <sidebyside width="18%" margins="auto" valign="bottom" permid="VOZ">

      <image permid="hWn">

				<latex-image>
					\begin{tikzpicture}
	\coordinate (A) at (-1,0);
	\coordinate (B) at (0,0);
	\coordinate (C) at (1,0);
	\coordinate (D) at (-.5,1);
	\coordinate (E) at (.5,1);

	\draw (A) -- (D) -- (B) -- (E) -- (C) -- (D) (A) -- (E);
	\foreach \x in {(A), (B), (C), (D), (E)}{
		\fill \x \v;
	}
	\end{tikzpicture}
				</latex-image>
      </image>

      <image permid="Odw">

				<latex-image>
					\begin{tikzpicture}
	\coordinate (A) at (90+360/5:1);
	\coordinate (B) at (90+2*360/5:1);
	\coordinate (C) at (90+3*360/5:1);
	\coordinate (D) at (90+4*360/5:1);
	\coordinate (E) at (90:1);

	\draw (A) -- (B) -- (C) -- (D) -- (E) -- (A);
	\foreach \x in {(A), (B), (C), (D), (E)}{
		\fill \x \v;
	}
	\end{tikzpicture}
				</latex-image>
      </image>

      <image permid="ukF">

				<latex-image>
					\begin{tikzpicture}
	\coordinate (A) at (-1,0);
	\coordinate (B) at (0,1);
	\coordinate (C) at (0,0);
	\coordinate (D) at (0,-1);
	\coordinate (E) at (1,0);

	\draw (A) -- (B) -- (E) -- (C) -- (A) -- (D) -- (E);
	\foreach \x in {(A), (B), (C), (D), (E)}{
		\fill \x \v;
	}
	\end{tikzpicture}
				</latex-image>
      </image>

      <image permid="arO">

				<latex-image>
					\begin{tikzpicture}
	\coordinate (A) at (90+360/5:1);
	\coordinate (B) at (90+2*360/5:1);
	\coordinate (C) at (90+3*360/5:1);
	\coordinate (D) at (90+4*360/5:1);
	\coordinate (E) at (90:1);

	\draw (A) -- (C) -- (E) -- (B) -- (D) -- (A);
	\foreach \x in {(A), (B), (C), (D), (E)}{
		\fill \x \v;
	}
	\end{tikzpicture}
				</latex-image>
      </image>

      <image permid="GyX">

				<latex-image>
					\begin{tikzpicture}
	\coordinate (A) at (-1,0);
	\coordinate (B) at (0,1);
	\coordinate (C) at (0,0);
	\coordinate (D) at (0,-1);
	\coordinate (E) at (1,0);

	\draw (A) -- (C) -- (B) (D) -- (C) -- (E);
	\foreach \x in {(A), (B), (C), (D), (E)}{
		\fill \x \v;
	}
	\end{tikzpicture}
				</latex-image>
      </image>

    </sidebyside>

    <p permid="TiO">
      The graphs above are unlabeled.
      Usually we think of a graph as having a specific set of vertices.
      Which (if any) of the graphs below are the same?
    </p>

    <sidebyside width="18%" margins="auto" valign="bottom" permid="BWi">

      <image permid="mGg">

				<latex-image>
					\begin{tikzpicture}
\coordinate (A) at (-1,0);
\coordinate (B) at (-1, 1);
\coordinate (C) at (0,0);
\coordinate (D) at (0,1);
\coordinate (E) at (1,0);
\coordinate (F) at (1,1);

\draw (A) node[below] {\(a\)} -- (B) node[above] {\(b\)} -- (C) node[below] {\(c\)} -- (D) node[above] {\(d\)} -- (E) node[below] {\(e\)} -- (F) node[above] {\(f\)} -- (C) (A) -- (D);
\foreach \x in {(A), (B), (C), (D), (E), (F)}{
	\fill \x \v;
}
\end{tikzpicture}
				</latex-image>
      </image>

      <image permid="SNp">

				<latex-image>
					\begin{tikzpicture}
\coordinate (A) at (-1,0);
\coordinate (B) at (-1, 1);
\coordinate (C) at (0,1);
\coordinate (D) at (0,0);
\coordinate (E) at (1,0);
\coordinate (F) at (1,1);

\draw (A) node[below] {\(a\)} -- (B) node[above] {\(b\)} -- (C) node[above] {\(c\)} -- (D) node[below] {\(d\)} -- (E) node[below] {\(e\)} -- (F) node[above] {\(f\)} -- (C) (A) -- (D);
\foreach \x in {(A), (B), (C), (D), (E), (F)}{
	\fill \x \v;
}
\end{tikzpicture}
				</latex-image>
      </image>

      <image permid="yUy">

				<latex-image>
					\begin{tikzpicture}
\coordinate (A) at (-1,0);
\coordinate (B) at (-1, 1);
\coordinate (C) at (0,0);
\coordinate (D) at (0,1);
\coordinate (E) at (1,0);
\coordinate (F) at (1,1);

\draw (A) node[below] {\(a\)} -- (B) node[above] {\(c\)} -- (C) node[below] {\(e\)} -- (D) node[above] {\(b\)} -- (E) node[below] {\(d\)} -- (F) node[above] {\(f\)} -- (C) (A) -- (D);
\foreach \x in {(A), (B), (C), (D), (E), (F)}{
	\fill \x \v;
}
\end{tikzpicture}
				</latex-image>
      </image>

      <image permid="fbH">

				<latex-image>
					\begin{tikzpicture}
\coordinate (A) at (-1,0);
\coordinate (B) at (-1, 1);
\coordinate (C) at (0,1);
\coordinate (D) at (0,0);
\coordinate (E) at (1,0);
\coordinate (F) at (1,1);

\draw (A) node[below] {\(v_6\)} -- (B) node[above] {\(v_1\)} -- (C) node[above] {\(v_2\)} -- (D) node[below] {\(v_5\)} -- (E) node[below] {\(v_4\)} -- (F) node[above] {\(v_3\)} -- (C) (A) -- (D);
\foreach \x in {(A), (B), (C), (D), (E), (F)}{
	\fill \x \v;
}
\end{tikzpicture}
				</latex-image>
      </image>

    </sidebyside>

    <p permid="zpX">
      Actually, all the graphs we have seen above are just
      <em>drawings</em> of graphs.
      A graph is really an abstract mathematical object consisting of two sets <m>V</m> and <m>E</m> where <m>E</m> is a set of 2-element subsets of <m>V</m>.
			Are the graphs below the same or different?
      <dl width="narrow" permid="cof">
        <li permid="UJG">
          <title>Graph 1:</title>
          <p permid="LZO">
            <m>V = \{a, b, c, d, e\}</m>,
          </p>

          <p permid="sgX">
            <m>E = \{\{a,b\}, \{a, c\}, \{a,d\}, \{a,e\}, \{b,c\}, \{d,e\}\}</m>.
          </p>
        </li>

        <li permid="AQP">
          <title>Graph 2:</title>
          <p permid="Yog">
            <m>V = \{v_1, v_2, v_3, v_4, v_5\}</m>,
          </p>

          <p permid="Evp">
            <m>E = \{\{v_1, v_3\}, \{v_1, v_5\}, \{v_2, v_4\}, \{v_2, v_5\}, \{v_3, v_5\}, \{v_4, v_5\}\}</m>.
          </p>
        </li>
      </dl>
    </p>
  </investigation>
  <p permid="wvr">
    Before we start studying graphs,
    we need to agree upon what a graph is.  		While we almost always think of graphs as pictures
    (dots connected by lines)
    this is fairly ambiguous.
    Do the lines need to be straight?
    Does it matter how long the lines are or how large the dots are?
    Can there be two lines connecting the same pair of dots?
    Can one line connect three dots?
  </p>

  <p permid="cCA">
    The way we avoid ambiguities in mathematics is to provide concrete and rigorous <em>definitions</em>.
    Crafting good definitions is not easy,
    but it is incredibly important.
    The definition is the agreed upon starting point from which all truths in mathematics proceed.
    Is there a graph with no edges?
    We have to look at the definition to see if this is possible.
  </p>

  <p permid="IJJ">
    We want our definition to be precise and unambiguous,
    but it also must agree with our intuition for the objects we are studying.
    It needs to be useful: we <em>could</em>
    define a graph to be a six legged mammal,
    but that would not let us solve any problems about bridges.
    Instead, here is the (now) standard definition of a graph.
  </p>

  <assemblage permid="AgV">
    <title>Graph Definition</title>
    <p permid="rLy">
      A <term>graph</term> is an ordered pair
      <m>G = (V, E)</m> consisting of a nonempty set <m>V</m>
      (called the <term>vertices</term>)
      and a set <m>E</m>
      (called the <term>edges</term>)
      of two-element subsets of <m>V</m>.
    </p>
  </assemblage>

  <p permid="oQS">
    Strange.
    Nowhere in the definition is there talk of dots or lines.
    From the definition, a graph could be
    <me permid="YCB">
      (\{a,b,c,d\}, \{\{a,b\}, \{a,c\}, \{b,c\}, \{b,d\}, \{c,d\}\})
    </me>.
    Here we have a graph with four vertices
    (the letters <m>a, b, c, d</m>)
    and five edges (the pairs <m>\{a,b\}, \{a,c\}, \{b,c\}, \{b,d\}, \{c,d\})</m>).
  </p>

  <p permid="UYb">
    Looking at sets and sets of 2-element sets is difficult to process.
    That is why we often draw a representation of these sets.
    We put a dot down for each vertex,
    and connect two dots with a line precisely when those two vertices are one of the 2-element subsets in our set of edges.
    Thus one way to draw the graph described above is this:
  </p>

  <sidebyside width="25%" permid="idr">

    <image permid="LiQ">

			<latex-image>
				\begin{tikzpicture}[scale=0.7]
	    \draw  (-1,1) \vl{\(a\)} -- (1,1) \vr{\(b\)} (-1,1) -- (-1,-1) \vl{\(c\)} -- (1,-1) \vr{\(d\)} -- (1,1) -- (-1,-1);
	  \end{tikzpicture}
			</latex-image>
    </image>

  </sidebyside>

  <p permid="Bfk">
    However we could also have drawn the graph differently.
    For example either of these:
  </p>

  <sidebyside widths="20% 25%" margins="auto" valign="bottom" permid="OkA">

    <image permid="rpZ">

			<latex-image>
				\begin{tikzpicture}[scale=0.7]
	    \draw  (-1,1) \vl{\(a\)} -- (1,-1) \vr{\(b\)} (-1,1) -- (-1,-1) \vl{\(c\)} -- (1,1) \vr{\(d\)} -- (1,-1) -- (-1,-1);
	  \end{tikzpicture}
			</latex-image>
    </image>

    <image permid="Xxi">
<!-- TODO: fix the labels to make them have the same baseline. -->
			<latex-image>
				\begin{tikzpicture}[scale=0.7]
	    \draw  (-1.5,0) \v -- (-.5,0) \v (-1.5,0) .. controls (-.5,1) .. (.5,0) \v -- (1.5,0) \v .. controls (.5,1) .. (-.5,0) -- (.5,0);
      {\footnotesize
      \draw (-1.5, -.75) node[above]{\(a\)} (-.5,-.75) node[above]{\(b\)} (.5,-.75) node[above]{\(c\)} (1.5, -.75) node[above]{\(d\)};
      }
	  \end{tikzpicture}
			</latex-image>
    </image>

  </sidebyside>

  <p permid="hmt">
    We should be careful about what it means for two graphs to be
    <q>the same.</q> Actually,
    given our definition, this is easy: Are the vertex sets equal?
    Are the edge sets equal?
    We know what it means for sets to be equal,
    and graphs are nothing but a pair of two special sorts of sets.
  </p>

  <example permid="kXX">
    <statement>
      <p permid="xAK">
        Are the graphs below equal?
        <me permid="EJK">
          G_1 = (\{a,b,c\}, \{\{a,b\}, \{b,c\}\}); \qquad G_2 = (\{a,b,c\}, \{\{a,c\}, \{c, b\}\})
        </me>.
      </p>
    </statement>
    <solution permid="XEm">
      <p permid="PEo">
        No.
        Here the vertex sets of each graph are equal, which is a good start.
        Also, both graphs have two edges.
        In the first graph, we have edges <m>\{a,b\}</m> and <m>\{b,c\}</m>,
        while in the second graph we have edges	<m>\{a,c\}</m> and 	<m>\{c,b\}</m>.
        Now we do have <m>\{b,c\} = \{c,b\}</m>,
        so that is not the problem.
        The issue is that <m>\{a,b\} \ne \{a,c\}</m>.
        Since the edge sets of the two graphs are not equal
        (as sets),
        the graphs are not equal
        (as graphs).
      </p>
    </solution>
  </example>

  <p permid="NtC">
    Even if two graphs are not <em>equal</em>,
    they might be <em>basically</em> the same.
    The graphs in the previous example could be drawn like this:
  </p>

  <sidebyside width="60%" permid="urJ">

    <image permid="DEr">

		 		<latex-image>

					\begin{tikzpicture}
					\draw (-3,0) \vb{\footnotesize $a$} -- (-2,0) \vb{\footnotesize $b$} -- (-1,0) \vb{\footnotesize $c$}  (3,0) \vb{\footnotesize $b$} -- (2,0) \vb{\footnotesize $c$} -- (1,0) \vb{$\footnotesize a$};
					\node[above] at (-3,.5) {$G_1$} ;
					\node[above] at (1, .5) {$G_2$};
					\end{tikzpicture}

		 		</latex-image>
    </image>

  </sidebyside>

  <p permid="tAL">
    Graphs that are basically the same
    (but perhaps not equal)
    are called <term>isomorphic</term>.
    We will give a precise definition of this term after a quick example:
  </p>

  <example permid="Rfg">
    <statement>
      <p permid="dHT">
        Consider the graphs:

        <me permid="kQT">
          G_1 = (V_1, E_1) \text{ where }
          V_1 = \{a, b, c\} \text{ and } E_1 = \{\{a,b\}, \{a,c\}, \{b,c\}\};
        </me>

        <me permid="QYc">
          G_2 = (V_2, E_2) \text{ where }
          V_2 = \{u,v,w\} \text{ and }E_2 = \{\{u,v\}, \{u,w\}, \{v,w\}\}.
        </me>
      </p>

      <p permid="JPc">
        Are these graphs the same?
      </p>
    </statement>
    <solution permid="DLv">
      <p permid="vLx">
        The two graphs are NOT equal.
        It is enough to notice that <m>V_1 \ne V_2</m> since
        <m>a \in V_1</m> but <m>a \notin V_2</m>.
        However, both of these graphs consist of three vertices with edges connecting every pair of vertices.
        We can draw them as follows:
      </p>

      <sidebyside width="25%" margins="auto" valign="bottom" permid="ayS">

        <image permid="jLA">

					<latex-image>
						\begin{tikzpicture}
	\draw  (90:1) \va{\(a\)} -- (210:1) \vl{\(b\)} -- (-30:1) \vr{\(c\)} -- (90:1);
	\end{tikzpicture}
					</latex-image>
        </image>

        <image permid="PSJ">

					<latex-image>
						\begin{tikzpicture}
	\draw  (90:1) \va{\(u\)} -- (210:1) \vl{\(v\)} -- (-30:1) \vr{\(w\)} -- (90:1);
	\end{tikzpicture}
					</latex-image>
        </image>

      </sidebyside>

      <p permid="bSG">
        Clearly we want to say these graphs are basically the same,
        so while they are not equal, they will be <em>isomorphic</em>.
        We can rename the vertices of one graph and get the second graph as the result.
      </p>
    </solution>
  </example>

  <p permid="ZHU">
    Intuitively, graphs are <term>isomorphic</term>
        <idx><h>isomorphic</h></idx>
    if they are basically the same, or better yet,
    if they are the same except for the names of the vertices.
    To make the concept of renaming vertices precise,
    we give the following definitions:
  </p>

  <assemblage permid="goe">
      <idx><h>isomorphic</h></idx>
    <title>Isomorphic Graphs</title>
    <p permid="XSH">
      An <term>isomorphism</term>
          <idx><h>isomorphism</h></idx>
      between two graphs <m>G_1</m> and <m>G_2</m> is a bijection
      <m>f:V_1 \to V_2</m> between the vertices of the graphs such that
      <m>\{a,b\}</m> is an edge in <m>G_1</m> if and only if <m>\{f(a), f(b)\}</m> is an edge in <m>G_2</m>.
    </p>

    <p permid="DZQ">
      Two graphs are <term>isomorphic</term> if there is an isomorphism between them.
      In this case we write <m>G_1 \isom G_2</m>.
    </p>
  </assemblage>

  <p permid="FPd">
    An isomorphism is simply a function which renames the vertices.
    It must be a bijection so every vertex gets a new name.
    These newly named vertices must be connected by edges precisely when they were connected by edges with their old names.
  </p>

  <example permid="xmp">
    <statement>
      <p permid="pWl">
        Decide whether the graphs <m>G_1 = (V_1, E_1)</m> and
        <m>G_2 = (V_2, E_2)</m> are equal or isomorphic.
      </p>

      <p permid="Wdu">
        <m>V_1 = \{a,b,c,d\}</m>,
        <m>E_1 = \{\{a,b\}, \{a,c\}, \{a,d\}, \{c,d\}\}</m>
      </p>

      <p permid="CkD">
        <m>V_2 = \{a,b,c,d\}</m>,
        <m>E_2 = \{\{a,b\}, \{a,c\}, \{b,c\}, \{c,d\}\}</m>
      </p>
    </statement>
    <solution permid="jSE">
      <p permid="HZP">
        The graphs are NOT equal,
        since <m>\{a,d\} \in E_1</m> but <m>\{a,d\} \notin E_2</m>.
        However, since both graphs contain the same number of vertices and same number of edges,
        they <em>might</em> be isomorphic
        (this is not enough in most cases, but it is a good start).
      </p>

      <p permid="ogY">
        We can try to build an isomorphism.
        How about we say <m>f(a) = b</m>,
        <m>f(b) = c</m>, <m>f(c) = d</m> and <m>f(d) = a</m>.
        This is definitely a bijection,
        but to make sure that the function is an isomorphism,
        we must make sure it <em>respects the edge relation</em>.
        In <m>G_1</m>,
        vertices <m>a</m> and <m>b</m> are connected by an edge.
        In <m>G_2</m>, <m>f(a) = b</m> and
        <m>f(b) = c</m> are connected by an edge.
        So far, so good, but we must check the other three edges.
        The edge <m>\{a,c\}</m> in <m>G_1</m> corresponds to
        <m>\{f(a),
        f(c)\} = \{b,d\}</m>, but here we have a problem.
        There is no edge between <m>b</m> and <m>d</m> in <m>G_2</m>.
        Thus <m>f</m> is NOT an isomorphism.
      </p>

      <p permid="Uoh">
        Not all hope is lost, however.
        Just because <m>f</m> is not an isomorphism does not mean that there is no isomorphism at all.
        We can try again.
        At this point it might be helpful to draw the graphs to see how they should match up.
      </p>

      <sidebyside widths="23% 23%" margins="auto" valign="bottom" permid="GGb">

        <image permid="vZS">

						<latex-image>

							\begin{tikzpicture}
								\coordinate (a) at (90:1);
								\coordinate (b) at (0:1);
								\coordinate (c) at (-90:1);
								\coordinate (d) at (180:1);

								\draw (a) -- (b) (a) -- (c) (a) -- (d) (c) --(d);
								\draw (a) \va{\footnotesize $a$} (b) \vr{\footnotesize $b$} (c)\vb{\footnotesize $c$} (d) \vl{\footnotesize $d$};
								\node at (-1,1) {$G_1$:};
							\end{tikzpicture}

						</latex-image>
        </image>

        <image permid="chb">

						<latex-image>

							\begin{tikzpicture}
								\coordinate (a) at (90:1);
								\coordinate (b) at (0:1);
								\coordinate (c) at (-90:1);
								\coordinate (d) at (180:1);

								\draw (a) -- (b) (a) -- (c) (b) -- (c) (c) --(d);
								\draw (a) \va{\footnotesize $a$} (b) \vr{\footnotesize $b$} (c)\vb{\footnotesize $c$} (d) \vl{\footnotesize $d$};
								\node at (-1,1) {$G_2$:};
							\end{tikzpicture}

						</latex-image>
        </image>

      </sidebyside>

      <p permid="Avq">
        Alternatively, notice that in <m>G_1</m>,
        the vertex <m>a</m> is adjacent to every other vertex.
        In <m>G_2</m>,
        there is also a vertex with this property: <m>c</m>.
        So build the bijection <m>g:V_1 \to V_2</m> by defining <m>g(a) = c</m> to start with.
        Next, where should we send <m>b</m>?
        In <m>G_1</m>,
        the vertex <m>b</m> is only adjacent to vertex <m>a</m>.
        There is exactly one vertex like this in <m>G_2</m>, namely <m>d</m>.
        So let <m>g(b) = d</m>.
        As for the last two, in this example, we have a free choice:
        let <m>g(c) = b</m> and <m>g(d) = a</m>
        (switching these would be fine as well).
      </p>

      <p permid="gCz">
        We should check that this really is an isomorphism.
        It is definitely a bijection.
        We must make sure that the edges are respected.
        The four edges in <m>G_1</m> are
        <me permid="xfl">
          \{a,b\}, \{a,c\}, \{a,d\}, \{c,d\}
        </me>.
      </p>

      <p permid="MJI">
        Under the proposed isomorphism these become
        <me permid="dmu">
          \{g(a), g(b)\}, \{g(a), g(c)\}, \{g(a), g(d)\}, \{g(c), g(d)\}
        </me>
        <me permid="JtD">
          \{c,d\}, \{c,b\}, \{c,a\}, \{b,a\}
        </me>,
        which are precisely the edges in <m>G_2</m>.
        Thus <m>g</m> is an isomorphism, so <m>G_1 \cong G_2</m>
      </p>
    </solution>
  </example>

  <p permid="lWm">
    Sometimes we will talk about a graph with a special name
    (like <m>K_n</m> or the <em>Peterson graph</em>)
    or perhaps draw a graph without any labels.
    In this case we are really referring to <em>all</em>
    graphs isomorphic to any copy of that particular graph.
    A collection of isomorphic graphs is often called an
    <term>isomorphism class</term>.
        <idx><h>isomorphism class</h></idx>
    <fn>
    This is not unlike geometry,
    where we might have more than one copy of a particular triangle.
    There instead of <em>isomorphic</em>
    we say <em>congruent</em>.
    </fn></p>

  <p permid="Sdv">
    There are other relationships between graphs that we care about,
    other than equality and being isomorphic.
    For example, compare the following pair of graphs:
  </p>

  <sidebyside width="20%" margins="auto" permid="mNk">

    <image permid="Iok">

			<latex-image>\begin{tikzpicture}
			      \foreach \x in {0,...,6}
			      \draw  (\x*60:1) \v -- (\x*60+60:1) -- (\x*60+180:1) -- cycle;
			    \end{tikzpicture}</latex-image>
    </image>

    <image permid="ovt">

			<latex-image>\begin{tikzpicture}
			      \foreach \x in {0,...,4}
			      \draw  (\x*90:1) \v -- (\x*90+90:1) -- (\x*90+180:1) -- cycle;
			    \end{tikzpicture}</latex-image>
    </image>

  </sidebyside>

  <p permid="ykE">
    These are definitely not isomorphic,
    but notice that the graph on the right looks like it might be part of the graph on the left,
    especially if we draw it like this:
  </p>

  <sidebyside width="20%" permid="SUt">

    <image permid="UCC">

			 <latex-image>\begin{tikzpicture}
						 \foreach \x in {0,...,6}
						 \draw[very thin]  (\x*60:1) \v -- (\x*60+60:1) -- (\x*60+180:1) -- cycle;
						 \draw[very thick] (0:1) -- (60:1) -- (180:1) -- (240:1) -- (0:1) -- (180:1) (60:1) -- (240:1);
					 \end{tikzpicture}</latex-image>
    </image>

  </sidebyside>

  <p permid="erN">
    We would like to say that the smaller graph is a
    <em>subgraph</em> of the larger.
  </p>

  <p permid="KyW">
    We should give a careful definition of this.
    In fact, there are two reasonable notions for what a subgraph should mean.
  </p>

  <assemblage permid="Mvn">
    <title>Subgraphs</title>
      <idx><h>subgraph</h></idx>
    <p oldPERMID="cBa" permid="kgZ">
      We say that <m>G' = (V', E')</m> is a <term>subgraph</term>
      of <m>G = (V, E)</m>, and write <m>G' \subseteq G</m>,
      provided <m>V' \subseteq V</m> and <m>E' \subseteq E</m>.
    </p>

    <p oldPERMID="IIj" permid="Qoi">
      We say that <m>G' = (V', E')</m> is an
      <term>induced subgraph</term>
          <idx><h>subgraph</h><h>induced</h></idx>
          <idx><h>induced subgraph</h></idx>
      of <m>G = (V, E)</m> provided
      <m>V' \subseteq V</m> and every edge in <m>E</m> whose vertices are still in <m>V'</m> is also an edge in <m>E'</m>.
    </p>
  </assemblage>

  <p permid="qGf">
    Notice that every induced subgraph is also an ordinary subgraph,
    but not conversely.
    Think of a subgraph as the result of deleting some vertices and edges from the larger graph.
    For the subgraph to be an induced subgraph,
    we can still delete vertices,
    but now we only delete those edges that included the deleted vertices.
  </p>

  <example permid="dty">
    <statement>
      <p permid="irM">
        Consider the graphs:
      </p>

      <sidebyside widths="18% 18% 18% 18%" margins="auto" valign="bottom" permid="zbC">
         <!-- valigns="bottom bottom bottom bottom"> -->

        <image permid="AJL">

						<latex-image>\begin{tikzpicture}[yscale=.8]
						      \draw  (-1,0) \vb{\footnotesize $a$} -- (0,0) \vb{\footnotesize $b$} -- (1,0) \vb{\footnotesize $c$} -- (.5,1) \vb{\footnotesize $e$} -- (0,0) -- (-.5,1) \vb{\footnotesize $d$} -- (0,2) \vb{\footnotesize $f$} -- (.5,1) -- (-.5,1) -- (-1,0);
									\node[below] at (0,-.5) {$G_1$};
						    \end{tikzpicture}</latex-image>
        </image>

        <image permid="gQU">

						<latex-image>\begin{tikzpicture}[yscale=.8]
									\draw  (-1,0) \vb{\footnotesize $a$} -- (0,0) \vb{\footnotesize $b$} -- (1,0) \vb{\footnotesize $c$}  (0,0) -- (-.5,1) \vb{\footnotesize $d$} (-.5,1) -- (-1,0);
									\node[below] at (0,-.5) {$G_2$};
								\end{tikzpicture}</latex-image>
        </image>

        <image permid="MYd">

						<latex-image>\begin{tikzpicture}[yscale=.8]
									\draw  (-1,0) \vb{\footnotesize $a$} (0,0) \vb{\footnotesize $b$} -- (1,0) \vb{\footnotesize $c$}  (0,0) -- (-.5,1) \vb{\footnotesize $d$} -- (0,2) \vb{\footnotesize $f$} (-1,0) -- (-.5,1);
									\node[below] at (0,-.5) {$G_3$};
								\end{tikzpicture}</latex-image>
        </image>

        <image permid="tfm">

						<latex-image>\begin{tikzpicture}[yscale=.8]
									\draw  (-1,0) \vb{\footnotesize $a$} -- (0,0) \vb{\footnotesize $b$} -- (1,0) \vb{\footnotesize $c$} -- (.5,1) (0,0) -- (-.5,1) \vb{\footnotesize $d$} -- (0,2) \vb{\footnotesize $f$} -- (.5,1) (-.5,1) -- (-1,0);
									\node[below] at (0,-.5) {$G_4$};
								\end{tikzpicture}</latex-image>
        </image>

      </sidebyside>

      <p permid="OyV">
        Here both <m>G_2</m> and <m>G_3</m> are subgraphs of <m>G_1</m>.
        But only <m>G_2</m> is an <em>induced</em> subgraph.
        Every edge in <m>G_1</m> that connects vertices in <m>G_2</m> is also an edge in <m>G_2</m>.
        In <m>G_3</m>,
        the edge <m>\{a,b\}</m> is in <m>E_1</m> but not <m>E_3</m>,
        even though vertices <m>a</m> and <m>b</m> are in <m>V_3</m>.
      </p>

      <p permid="uGe">
        The graph <m>G_4</m> is NOT a subgraph of <m>G_1</m>,
        even though it looks like all we did is remove vertex <m>e</m>.
        The reason is that in <m>E_4</m> we have the edge <m>\{c,f\}</m> but this is not an element of <m>E_1</m>,
        so we don't have the required 	<m>E_4 \subseteq E_1</m>.
      </p>
    </statement>
  </example>

  <p permid="WNo">
    Back to some basic graph theory definitions.
    Notice that all the graphs we have drawn above have the property that no pair of vertices is connected more than once,
    and no vertex is connected to itself.
    Graphs like these are sometimes called <term>simple</term>,
    although we will just call them <em>graphs</em>.
    This is because our definition for a graph says that the edges form a set of 2-element subsets of the vertices.
    Remember that it doesn't make sense to say a set contains an element more than once.
    So no pair of vertices can be connected by an edge more than once.
    Also, since each edge must be a set containing two vertices,
    we cannot have a single vertex connected to itself by an edge.
  </p>

  <p permid="CUx">
    That said, there are times we want to consider double
    (or more)
    edges and single edge loops.
    For example,
    the <q>graph</q> we drew for the Bridges of Königsberg problem had double edges because there really are two bridges connecting a particular island to the near shore.
    We will call these objects <term>multigraphs</term>.
        <idx><h>multigraph</h></idx>
    This is a good name: a <em>multiset</em>
    is a set in which we are allowed to include a single element multiple times.
  </p>

  <p permid="jbG">
    The graphs above are also <term>connected</term>:
        <idx><h>connected</h></idx>
    you can get from any vertex to any other vertex by following some path of edges.
    A graph that is not connected can be thought of as two separate graphs drawn close together.
    For example,
    the following graph is NOT connected because there is no path from <m>a</m> to <m>b</m>:
  </p>

  <sidebyside width="33%" permid="fiL">

    <image xml:id="ex-gt-non-connected" permid="Zmv">

			<latex-image>

				\begin{tikzpicture}
					\draw (-1.5,0) \vl{\footnotesize $a$} -- (-.5, 1) \v -- (.5, 0) \v -- (-.5,-1) \v -- cycle;
					\draw (-.5,0) \v -- (.5,1) \v -- (1.5,0) \vr{\footnotesize $b$} -- (.5,-1) \v -- cycle;
				\end{tikzpicture}

			</latex-image>
    </image>

  </sidebyside>


  <p permid="PiP">
    Vertices in a graph do not always have edges between them.
    If we add all possible edges,
    then the resulting graph is called <term>complete</term>.
        <idx><h>complete graph</h></idx>
    That is, a graph is complete if every pair of vertices is connected by an edge.
    Since a graph is determined completely by which vertices are adjacent to which other vertices,
    there is only one complete graph with a given number of vertices.
    We give these a special name: <m>K_n</m>

    <notation>
      <usage>K_n</usage>
      <description>the complete graph on <m>n</m> vertices</description>
    </notation>

    is the complete graph on <m>n</m> vertices.
  </p>

  <p permid="vpY">
    Each vertex in <m>K_n</m> is adjacent to <m>n-1</m> other vertices.
    We call the number of edges emanating from a given vertex the
    <term>degree</term> of that vertex.
    So every vertex in <m>K_n</m> has degree <m>n-1</m>.
    How many edges does <m>K_n</m> have?
    One might think the answer should be <m>n(n-1)</m>,
    since we count <m>n-1</m> edges <m>n</m> times
    (once for each vertex).
    However, each edge is incident to 2 vertices,
    so we counted every edge exactly twice.
    Thus there are <m>n(n-1)/2</m> edges in <m>K_n</m>.
    Alternatively, we can say there are <m>{n \choose 2}</m> edges,
    since to draw an edge we must choose 2 of the <m>n</m> vertices.
  </p>

  <p permid="bxh">
    In general, if we know the degrees of all the vertices in a graph,
    we can find the number of edges.
    The sum of the degrees of all vertices will always be
    <em>twice</em> the number of edges,
    since each edge adds to the degree of two vertices.
    Notice this means that the sum of the degrees of all vertices in any graph must be even!
  </p>
  
  <p permid="HEq">
    This is our first example of a general result about all graphs.  It seems innocent enough, but we will use it to prove all sorts of other statements.  So let's give it a name and state it formally.
  </p>
  
  <lemma xml:id="lem-handshake" permid="EQO">
    <title>Handshake Lemma</title> 
    <idx><h>handshake lemma</h></idx>   
    <idx><h>degree sum formula</h></idx>
    <statement>
      <p permid="RtB">
        In any graph, the sum of the degrees of vertices in the graph is always twice the number of edges.
      </p>
    </statement>
  </lemma>
  
  <p permid="nLz">
    The handshake lemma<fn>A <em>lemma</em> is a mathematical statement that is primarily of importance in that it is used to establish other results.</fn> is sometimes called the <em>degree sum formula</em>, and can be written symbolically as <me permid="pAM">
      \sum_{v\in V} d(v) = 2e
    </me>.
    Here we are using the notation <m>d(v)</m> for the degree of the vertex <m>v</m>.
  </p>
  
  <p permid="TSI">
    One use for the lemma is to actually find the number of edges in a graph.  To do this, you must be given the <term>degree sequence</term> for the graph (or be able to find it from other information).  This is a list of every degree of every vertex in the graph, generally written in non-increasing order.
  </p>
  
  <example permid="JAH">
    <statement>
      <p permid="aNn">
        How many vertices and edges must a graph have if its degree sequence is <me permid="VHV">
          (4, 4, 3, 3, 3, 2, 1)
        </me>?
      </p>
    </statement>
    <solution permid="PZN">
      <p permid="sQR">
        The number of vertices is easy to find: it is the number of degrees in the sequence: 7.  To find the number of edges, we compute the degree sum:
        <me permid="BPe">
          4 + 4 + 3 + 3 + 3 + 2 + 1 = 20
        </me>,
        so the number of edges is half this: 10.
      </p>
    </solution>
  </example>

  <p permid="zZR">
    The handshake lemma also tells us what is not possible.  
  </p>

  <example permid="pHQ">
    <statement>
      <p permid="GUw">
        At a recent math seminar, 9 mathematicians greeted each other by shaking hands.
        Is it possible that each mathematician shook hands with exactly 7 people at the seminar?
      </p>
    </statement>
    <solution permid="wgW">
      <p permid="YYa">
        It seems like this should be possible.
        Each mathematician chooses one person to not shake hands with.
        But this cannot happen.
        We are asking whether a graph with 9 vertices can have each vertex have degree 7.
        If such a graph existed,
        the sum of the degrees of the vertices would be <m>9\cdot 7 = 63</m>.
        This would be twice the number of edges (handshakes) resulting in a graph with <m>31.5</m> edges.
        That is impossible.
        Thus at least one
        (in fact an odd number)
        of the mathematicians must have shaken hands with an <em>even</em>
        number of people at the seminar.
      </p>
    </solution>
  </example>

  <p permid="gha">
    We can generalize the previous example to get the following proposition.<fn>A <term>proposition</term> is a general statement in mathematics, similar to a theorem, although generally of lesser importance.</fn> 
  </p>
  
  <proposition xml:id="prop-evensum" permid="YJF">
    <statement>
      <p permid="lms">
        In any graph, the number of vertices with odd degree must be even.
      </p>
    </statement>
    <proof permid="rxd">
      <p permid="Ffj">
        Suppose there were a graph with an odd number of vertices with odd degree.  Then the sum of the degrees in the graph would be odd, which is impossible, by the handshake lemma.
      </p>
    </proof>
  </proposition>

  <p permid="Moj">
    We will consider further applications of the handshake lemma in the exercises.
  </p>

  <p permid="svs">
    One final definition: we say a graph is <term>bipartite</term>
        <idx><h>bipartite</h></idx>
    if the vertices can be divided into two sets, <m>A</m> and <m>B</m>,
    with no two vertices in <m>A</m> adjacent and no two vertices in <m>B</m> adjacent.
    The vertices in <m>A</m> can be adjacent to some or all of the vertices in <m>B</m>.
    If each vertex in <m>A</m> is adjacent to all the vertices in <m>B</m>,
    then the graph is a <term>complete bipartite graph</term>,
    and gets a special name:
    <m>K_{m,n}</m>, where <m>|A| = m</m> and <m>|B| = n</m>.
    The graph in the houses and utilities puzzle is <m>K_{3,3}</m>.
  </p>

	<!-- TODO: give picture example of bipartite and not bipartite graphs -->
  <paragraphs permid="nSD">
    <title>Named Graphs</title>
    <p permid="fxg">
      Some graphs are used more than others, and get special names.
      <dl width="narrow" permid="Ivo">
        <li permid="gXY">
          <title><m>K_n</m></title>
          <p permid="kCy">
            The complete graph on <m>n</m> vertices.

            <notation>
              <usage>K_n</usage>
              <description>the complete graph on <m>n</m> vertices.</description>
            </notation>

          </p>
        </li>

        <li permid="Nfh">
          <title><m>K_{m,n}</m></title>
          <p permid="QJH">
            The complete bipartite graph with sets of <m>m</m> and <m>n</m> vertices.

            <notation>
              <usage>K_{m,n}</usage>
              <description>the complete bipartite graph of <m>m</m> and <m>n</m> vertices.</description>
            </notation>

          </p>
        </li>

        <li permid="tmq">
          <title><m>C_n</m></title>
          <p permid="wQQ">
            The cycle on <m>n</m> vertices, just one big loop.

            <notation>
              <usage>C_n</usage>
              <description>the cycle on <m>n</m> vertices</description>
            </notation>

          </p>
        </li>

        <li oldPERMID="Kjb" permid="Ztz">
          <title><m>P_n</m></title>
          <p oldPERMID="NNB" permid="cXZ">
            The path on <m>n+1</m> vertices
            (so <m>n</m> edges),
            just one long path.

            <notation>
              <usage>P_n</usage>
              <description>the path on <m>n+1</m> vertices</description>
            </notation>

          </p>
        </li>
      </dl>
    </p>

    <sidebyside widths="18% 20% 15% 24%" margins="auto" valign="bottom" permid="sCw">

      <image permid="FtE">

				<latex-image>
					\begin{tikzpicture}[scale=1]
	  \path (0,0) +(18:1) coordinate (a);
	  \path (0,0) +(90:1) coordinate (b);
	  \path (0,0) +(162:1) coordinate (c);
	  \path (0,0) +(234:1) coordinate (d);
	  \path (0,0) +(306:1) coordinate (e);
	  \draw  (a) \v -- (b) \v -- (c) \v -- (d) \v -- (e) \v -- (a) -- (c) -- (e) -- (b) -- (d) -- (a);
	  \draw (0,-1.35) node[below]{ \(K_5\)};
	\end{tikzpicture}
				</latex-image>
      </image>

      <image permid="lAN">

				<latex-image>
					\begin{tikzpicture}[scale=.6, xscale=1.5]
	 \draw  (-1, 0) \v -- (-.5,2) \v -- (0,0) \v -- (.5, 2) \v -- (1,0) \v -- (-.5,2) (.5,2) -- (-1,0);
	 \draw (0,-.5) node[below]{ \(K_{2,3}\)};
	  \end{tikzpicture}
				</latex-image>
      </image>

      <image permid="RHW">

				<latex-image>
					\begin{tikzpicture}[scale=.6]
	  \draw  (0:1) \v -- (60:1) \v -- (120:1) \v -- (180:1) \v -- (240:1) \v -- (300:1) \v -- cycle;
	  \draw (270:1.5) node[below]{ \(C_6\)};
	\end{tikzpicture}
				</latex-image>
      </image>

      <image oldPERMID="gPu" permid="xPf">

				<latex-image>
					\begin{tikzpicture}[scale=.6]
	  \draw  (-2,0) \v -- (-1,.5) \v -- (0,0) \v -- (1,.75) \v -- (.5,1.5) \v -- (2,2) \v;
	  \draw (0,-.5) node[below]{ \(P_5\)};
	\end{tikzpicture}
				</latex-image>
      </image>

    </sidebyside>
  </paragraphs>

  <paragraphs oldPERMID="drY" permid="TZM">
    <title>Graph Theory Definitions</title>
    <p permid="LEp">
      There are a lot of definitions to keep track of in graph theory.
      Here is a glossary of the terms we have already used and will soon encounter.
      <dl width="medium" permid="oCx">
        <li permid="FAI">
          <title>Graph</title>
          <p permid="Jfi">
              <idx><h>graph</h></idx>
          A collection of
          <term>vertices</term>, some of which are connected by
          <term>edges</term>.
          More precisely, a pair of sets <m>V</m> and <m>E</m> where <m>V</m> is a set of vertices and <m>E</m> is a set of 2-element subsets of <m>V</m>.
          </p>
        </li>

        <li permid="lHR">
          <title>Adjacent</title>
          <p permid="pmr">
              <idx><h>adjacent</h></idx>
          Two vertices are
          <term>adjacent</term> if they are connected by an edge.
          Two edges are
          <term>adjacent</term> if they share a vertex.
          </p>
        </li>

        <li permid="RPa">
          <title>Bipartite graph</title>
          <p permid="VtA">
              <idx><h>bipartite</h></idx>
          A graph for which it is possible to divide the vertices into two disjoint sets such that there are no edges between any two vertices in the same set.
          </p>
        </li>

        <li permid="xWj">
          <title>Complete bipartite graph</title>
          <p permid="BAJ">
            A bipartite graph for which every vertex in the first set is adjacent to every vertex in the second set.
          </p>
        </li>

        <li permid="eds">
          <title>Complete graph</title>
          <p permid="hHS">
              <idx><h>complete graph</h></idx>
          A graph in which every pair of vertices is adjacent.
          </p>
        </li>

        <li permid="KkB">
          <title>Connected</title>
          <p permid="NPb">
              <idx><h>connected</h></idx>
          A graph is
          <term>connected</term> if there is a path from any vertex to any other vertex.
          </p>
        </li>

        <li permid="qrK">
          <title>Chromatic number</title>
          <p permid="tWk">
              <idx><h>chromatic number</h></idx>
          The minimum number of colors required in a proper vertex coloring of the graph.
          </p>
        </li>

        <li permid="WyT">
          <title>Cycle</title>
          <p permid="adt">
              <idx><h>cycle</h></idx>
          A path (see below) that starts and stops at the same vertex, but contains no other repeated vertices.
          </p>
        </li>

        <li permid="CGc">
          <title>Degree of a vertex</title>
          <p permid="GkC">
              <idx><h>degree</h></idx>
          The number of edges incident to a vertex.
          </p>
        </li>

        <li permid="iNl">
          <title>Euler path</title>
          <p permid="mrL">
              <idx><h>Euler path</h></idx>
            A walk which uses each edge exactly once.
          </p>
        </li>

        <li permid="OUu">
          <title>Euler circuit</title>
          <p permid="SyU">
              <idx><h>Euler circuit</h></idx>
          An Euler path which starts and stops at the same vertex.
          </p>
        </li>

        <li permid="vbD">
          <title>Multigraph</title>
          <p permid="yGd">
              <idx><h>multigraph</h></idx>
          A
          <term>multigraph</term>
          is just like a graph but can contain multiple edges between two vertices as well as single edge loops
          (that is an edge from a vertex to itself).
          </p>
        </li>

        <li permid="biM">
          <title>Path</title>
              <idx><h>path</h></idx>
          <p permid="eNm">
            A <term>path</term> is a walk that doesn't repeat any vertices
            (or edges)
            except perhaps the first and last.
            If a path starts and ends at the same vertex,
            it is called a <term>cycle</term>.
          </p>
        </li>

        <li permid="HpV">
          <title>Planar</title>
          <p permid="KUv">
              <idx><h>planar</h></idx>
          A graph which can be drawn (in the plane) without any edges crossing.
          </p>
        </li>

        <li permid="nxe">
          <title>Subgraph</title>
          <p permid="rbE">
              <idx><h>subgraph</h></idx>
            We say that <m>H</m> is a
            <term>subgraph</term> of <m>G</m> if every vertex and edge of <m>H</m> is also a vertex or edge of <m>G</m>.
            We say <m>H</m> is an
            <term>induced</term> subgraph of <m>G</m> if every vertex of <m>H</m> is a vertex of <m>G</m>
            and
            each pair of vertices in <m>H</m> are adjacent in <m>H</m> if and only if they are adjacent in <m>G</m>.
          </p>
        </li>

        <li permid="TEn">
          <title>Tree</title>
          <p permid="XiN">
              <idx><h>tree</h></idx>
            A connected graph with no cycles. (If we remove the requirement that the graph is connected, the graph is called a
            <term>forest</term>.) The vertices in a tree with degree 1 are called
            <term>leaves</term>.
          </p>
        </li>

        <li permid="zLw">
          <title>Vertex coloring</title>
          <p permid="DpW">
              <idx><h>vertex coloring</h></idx>
          An assignment of colors to each of the vertices of a graph.
            A vertex coloring is
      <term>proper</term> if adjacent vertices are always colored differently.
          </p>
        </li>

        <li permid="fSF">
          <title>Walk</title>
          <p permid="jxf">
              <idx><h>walk</h></idx>
            A sequence of vertices such that consecutive vertices (in the sequence) are adjacent (in the graph).
            A walk in which no edge is repeated is called a <term>trail</term>,
            and a trail in which no vertex is repeated
            (except possibly the first and last)
            is called a <term>path</term>.
          </p>
        </li>
      </dl>
    </p>
  </paragraphs>

  <xi:include href="exercises/gt-intro.ptx"/>
</section>
