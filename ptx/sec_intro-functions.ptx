<?xml version="1.0" encoding="UTF-8"?>

<section permid="BUV" xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec_intro-functions">
  <title>Functions</title>
  <m>\textit{}</m>

  <introduction permid="RNN">
    <p permid="EIx">
      A <term>function</term>
          <idx><h>function</h></idx>
      is a rule that assigns each input exactly one output.
      We call the output the <term>image</term> of the input.
      The set of all inputs for a function is called the
      <term>domain</term>.
          <idx><h>domain</h></idx>
      The set of all allowable outputs is called the
      <term>codomain</term>.
          <idx><h>codomain</h></idx>
      We would write <m>f:X \to Y</m> to describe a function with name <m>f</m>,
      domain <m>X</m> and codomain <m>Y</m>.
      This does not tell us <em>which</em>
      function <m>f</m> is though.
      To define the function, we must describe the rule.
      This is often done by giving a formula to compute the output for any input
      (although this is certainly not the only way to describe the rule).
    </p>

    <p permid="kPG">
      For example, consider the function
      <m>f:\N \to \N</m> defined by <m>f(x) = x^2 + 3</m>.
      Here the domain and codomain are the same set
      (the natural numbers).
      The rule is: take your input,
      multiply it by itself and add 3.
      This works because we can apply this rule to every natural number
      (every element of the domain)
      and the result is always a natural number
      (an element of the codomain).
      Notice though that not every natural number is actually an output
      (there is no way to get 0, 1, 2, 5, etc.).
      The set of natural numbers that
      <em>are</em> outputs is called the
      <term>range</term>
          <idx><h>range</h></idx>
      of the function
      (in this case,
      the range is <m>\{3, 4, 7, 12, 19, 28, \ldots\}</m>,
      all the natural numbers that are 3 more than a perfect square).
    </p>

    <p permid="QWP">
      The key thing that makes a rule a <em>function</em>
      is that there is <em>exactly one</em> output for each input.
      That is, it is important that the rule be a good rule.
      What output do we assign to the input 7?
      There can only be one answer for any particular function.
    </p>

    <example permid="Zsm">
      <statement>
        <p permid="jat">
          The following are all examples of functions:

          <ol permid="nvR">
            <li permid="tUX">
              <p permid="FdW">
                <m>f:\Z \to \Z</m> defined by <m>f(n) = 3n</m>.
                The domain and codomain are both the set of integers.
                However, the range is only the set of integer multiples of 3.
              </p>
            </li>

            <li permid="acg">
              <p permid="llf">
                <m>g: \{1,2,3\} \to \{a,b,c\}</m> defined by <m>g(1) = c</m>,
                <m>g(2) = a</m> and <m>g(3) = a</m>.
                The domain is the set <m>\{1,2,3\}</m>,
                the codomain is the set <m>\{a,b,c\}</m> and the range is the set <m>\{a,c\}</m>.
                Note that <m>g(2)</m> and <m>g(3)</m> are the same element of the codomain.
                This is okay since each element in the domain still has only one output.
              </p>
            </li>

            <li permid="Gjp">
              <p permid="Rso">
                <m>h:\{1,2,3,4\} \to \N</m> defined by the table:
              </p>

              <sidebyside permid="lGE">

                <tabular permid="TvW">
                  <row bottom="minor">
                    <cell right="minor" halign="center"><m>x</m></cell>
                    <cell>1</cell>
                    <cell>2</cell>
                    <cell>3</cell>
                    <cell>4</cell>
                  </row>
                  <row>
                    <cell right="minor" halign="center"><m>g(x)</m></cell>
                    <cell>3</cell>
                    <cell>6</cell>
                    <cell>9</cell>
                    <cell>12</cell>
                  </row>
                </tabular>

              </sidebyside>

              <p permid="xzx">
                Here the domain is the finite set
                <m>\{1,2,3,4\}</m> and to codomain is the set of natural numbers,
                <m>\N</m>.
                At first you might think this function is the same as <m>f</m> defined above.
                It is absolutely not.
                Even though the rule is the same,
                the domain and codomain are different,
                so these are two different functions.
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </example>

    <example permid="Fzv">
      <statement>
        <p permid="PhC">
          Just because you can describe a rule in the same way you would write a function,
          does not mean that the rule is a function.
          The following are NOT functions.

          <ol permid="TDa">
            <li permid="mqy">
              <p permid="dGG">
                <m>f:\N \to \N</m> defined by <m>f(n) = \frac{n}{2}</m>.
                The reason this is not a function is because not every input has an output.
                Where does <m>f</m> send 3?
                The rule says that <m>f(3) = \frac{3}{2}</m>,
                but <m>\frac{3}{2}</m> is not an element of the codomain.
              </p>
            </li>

            <li permid="SxH">
              <p permid="JNP">
                Consider the rule that matches each person to their phone number.
                If you think of the set of people as the domain and the set of phone numbers as the codomain,
                then this is not a function, since some people have two phone numbers.
                Switching the domain and codomain sets doesn't help either,
                since some phone numbers belong to multiple people
                (assuming some households still have landlines when you are reading this).
              </p>
            </li>
          </ol>
        </p>
      </statement>
    </example>
  </introduction>

  <subsection permid="ice">
    <title>Describing Functions</title>
    <p permid="xdY">
      It is worth making a distinction between a function and its description.
      The function is the abstract mathematical object that in some way exists whether or not anyone ever talks about it.
      But when we <em>do</em> want to talk about the function,
      we need a way to describe it.
      A particular function can be described in multiple ways.
    </p>

    <p permid="dlh">
      Some calculus textbooks talk about the <em>Rule of Four</em>:
      that every function can be described in four ways:
      algebraically (a formula), numerically (a table), graphically,
      or in words.
      In discrete math,
      we can still use any of these to describe functions,
      but we can also be more specific since we are primarily concerned with functions that have <m>\N</m> or a finite subset of <m>\N</m> as their domain.
    </p>

    <p permid="Jsq">
      Describing a function graphically usually means drawing the graph of the function:
      plotting the points on the plain.
      We can do this,
      and might get a graph like the following for a function <m>f:\{1,2,3\} \to \{1,2,3\}</m>.
    </p>

    <sidebyside permid="LoH" width="30%">

      <image permid="QBq" xml:id="discrete-function-graph">

        <latex-image>
          \begin{tikzpicture}[scale=0.75]
            \draw[thin, gray!50] (0,0) grid (3.5, 3.5);
            \draw[-&gt;, thick] (0,0) -- (0,3.5);
            \draw[-&gt;, thick] (0,0) -- (3.5,0);
            \fill (1,2) circle (3pt) (2,1) circle (3pt) (3,3) circle (3pt);
          \end{tikzpicture}
        </latex-image>
      </image>

    </sidebyside>

    <p permid="pzz">
      It would be absolutely WRONG to connect the dots or try to fit them to some curve.
      There are only three elements in the domain.
      A curve would mean that the domain contains an entire interval of real numbers.
    </p>

    <p permid="VGI">
      Here is another way to represent that same function:
    </p>

    <sidebyside permid="rvQ" width="17%">

      <image permid="wIz" xml:id="arrow-function-example">

        <latex-image>
          \begin{tikzpicture}[scale=0.85]
            \draw[-&gt;] (-1,1) node[above] {1} -- (0,0) node[below] {2};
            \draw[-&gt;] (0,1) node[above] {2} -- (-1,0) node[below] {1};
            \draw[-&gt;] (1,1) node[above] {3} -- (1,0) node[below] {3};
          \end{tikzpicture}
        </latex-image>
      </image>

    </sidebyside>

    <p permid="BNR">
      This shows that the function <m>f</m> sends 1 to 2, 2 to 1 and 3 to 3:
      just follow the arrows.
    </p>

    <p permid="hVa">
      The arrow diagram used to define the function above can be very helpful in visualizing functions.
      We will often be working with functions with
      <em>finite</em> domains,
      so this kind of picture is often more useful than a traditional graph of a function.
    </p>

    <p permid="Ocj">
      Note that for finite domains,
      finding an algebraic formula that gives the output for any input is often impossible.
      Of course we could use a piecewise defined function, like
      <me permid="dVb">
        f(x) = \begin{cases} x+1 \amp \text{ if } x = 1 \\ x-1 \amp \text{ if } x = 2 \\ x \amp \text{ if } x = 3\end{cases}
      </me>.
      This describes exactly the same function as above,
      but we can all agree is a ridiculous way of doing so.
    </p>

    <p permid="ujs">
      Since we will so often use functions with small domains and codomains,
      let's adopt some notation to describe them.
      All we need is some clear way of denoting the image of each element in the domain.
      In fact, writing a table of values would work perfectly:
    </p>

    <sidebyside permid="XCZ">

      <tabular permid="cPI">
        <row bottom="minor">
          <cell right="minor" halign="center"><m>x</m></cell>
          <cell>0</cell>
          <cell>1</cell>
          <cell>2</cell>
          <cell>3</cell>
          <cell>4</cell>
        </row>
        <row>
          <cell right="minor" halign="center"><m>f(x)</m></cell>
          <cell>3</cell>
          <cell>3</cell>
          <cell>2</cell>
          <cell>4</cell>
          <cell>1</cell>
        </row>
      </tabular>

    </sidebyside>

    <p permid="aqB">
      We simplify this further by writing this as a matrix with each input directly over its output:
      <me permid="Kck">
        f = \twoline{0 \amp 1 \amp 2\amp 3 \amp 4}{3 \amp 3 \amp 2 \amp 4 \amp 1}
      </me>
      Note this is just notation and not the same sort of matrix you would find in a linear algebra class
      (it does not make sense to do operations with these matrices,
      or row reduce them, for example).
    </p>

    <p permid="GxK">
      One advantage of the two-line notation over the arrow diagrams is that it is harder to accidentally define a rule that is not a function using two-line notation.
    </p>

    <example permid="STg">
      <statement>
        <p permid="voL">
          Which of the following diagrams represent a function?
          Let <m>X = \{1,2,3,4\}</m> and <m>Y = \{a,b,c,d\}</m>.
        </p>

        <sidebyside permid="DKi" widths="25% 25% 25%" margins="auto">

          <image permid="YfP" xml:id="f-arrows" width="75%">

            <latex-image>
              \begin{tikzpicture}[scale=0.9]
                \draw[-&gt;] (-1.5,1) node[above] {1} -- (1.5,0) node[below] {\(d\)};
                \draw[-&gt;] (-.5,1) node[above] {2} -- (-1.5,0) node[below] {\(a\)};
                \draw[-&gt;] (.5,1) node[above] {3} -- (.5, 0) node[below] {\(c\)};
                \draw[-&gt;] (1.5,1) node[above] {4} -- (-.5, 0) node[below] {\(b\)};
                \node[above] at (0,1.5) {$f:X \to Y$};
              \end{tikzpicture}
            </latex-image>
          </image>

          <image permid="EmY" xml:id="g-arrows" width="75%">

            <latex-image>
              \begin{tikzpicture}[scale=0.9]
                \draw[-&gt;] (-1.5,1) node[above] {1} -- (1.5,0) node[below] {\(d\)};
                \draw[-&gt;] (-.5,1) node[above] {2} -- (-1.6,0) node[below] {\(a\)};
                \draw[-&gt;] (.5,1) node[above] {3} -- (-1.4, 0);
                \draw[-&gt;] (1.5,1) node[above] {4} -- (-.5, 0) node[below] {\(b\)};
                \draw (.5,0) node[below] {\(c\)};
                \node[above] at (0,1.5) { $g:X \to Y$};
              \end{tikzpicture}
            </latex-image>
          </image>

          <image permid="kuh" xml:id="h-arrows" width="75%">

            <latex-image>
              \begin{tikzpicture}[scale=0.9]
                \draw (-1.5,1) node[above] {1};
                \draw[-&gt;] (-.5,1) node[above] {2} (-.6,1) -- (-1.5,0) node[below] {\(a\)};
                \draw[-&gt;] (-.4,1) -- (.5,0);
                \draw[-&gt;] (.5,1) node[above] {3} -- (1.5, 0) node[below] {\(d\)};
                \draw[-&gt;] (1.5,1) node[above] {4} -- (-.5, 0) node[below] {\(b\)};
                \draw (.5,0) node[below] {\(c\)};
                \node[above] at (0,1.5) {$h:X \to Y$};
              \end{tikzpicture}
            </latex-image>
          </image>

        </sidebyside>
      </statement>
      <solution permid="xUW">
        <p permid="IIw">
          <m>f</m> is a function.
          So is <m>g</m>.
          There is no problem with an element of the codomain not being the image of any input,
          and there is no problem with <m>a</m> from the codomain being the image of both 2 and 3 from the domain.
          We could use our two-line notation to write these as
          <me permid="qjt">
            f= \begin{pmatrix} 1 \amp 2 \amp 3 \amp 4 \\ d \amp a \amp c \amp b \end{pmatrix} \qquad g = \begin{pmatrix} 1 \amp 2 \amp 3 \amp 4 \\ d \amp a \amp a \amp b \end{pmatrix}
          </me>.
        </p>

        <p permid="oPF">
          However, <m>h</m> is NOT a function.
          In fact, it fails for two reasons.
          First, the element 1 from the domain has not been mapped to any element from the codomain.
          Second, the element 2 from the domain has been mapped to more than one element from the codomain
          (<m>a</m> and <m>c</m>).
          Note that either one of these problems is enough to make a rule not a function.
          In general, neither of the following mappings are functions:
        </p>

        <sidebyside permid="jRr" widths="18% 27%" margins="auto">

          <image permid="LRx" xml:id="not-function-a">

            <latex-image>
              \begin{tikzpicture}[scale=0.9]
                \fill (-1, 1.2) circle (.1) (0,1.2) circle (.1) (1, 1.2) circle (.1);
                \draw[-&gt;] (-1, 1) -- (-.5,0);
                \draw[-&gt;] (1,1) -- (.5, 0);
                \draw (-.5, -0.2) circle (.1) (.5, -0.2) circle (.1);
              \end{tikzpicture}
            </latex-image>
          </image>

          <image permid="rYG" xml:id="not-function-b">

            <latex-image>
              \begin{tikzpicture}[scale=0.9]
                 \fill (-1, 1.2) circle (.1) (0,1.2) circle (.1) (1, 1.2) circle (.1);
                 \draw[-&gt;] (-1.1, 1) -- (-1.5, 0);
                 \draw[-&gt;] (-.9, 1) -- (-.5, 0);
                 \draw[-&gt;] (0,1) -- (.5,0);
                 \draw[-&gt;] (1,1) -- (1.5, 0);
                 \draw (-.5, -0.2) circle (.1) (.5, -0.2) circle (.1) (-1.5, -0.2) circle (.1) (1.5, -0.2) circle (.1);
               \end{tikzpicture}
            </latex-image>
          </image>

        </sidebyside>

        <p permid="UWO">
          It might also be helpful to think about how you would write the two-line notation for <m>h</m>.
          We would have something like:
          <me permid="WqC">
            h=\twoline{1 \amp 2 \amp 3 \amp 4}{\amp a,c? \amp d \amp b}
          </me>.
          There is nothing under 1 (bad) and we needed to put more than one thing under 2
          (very bad).
          With a rule that is actually a function,
          the two-line notation will always <q>work</q>.
        </p>
      </solution>
    </example>

    <p permid="mET">
      We will also be interested in functions with domain <m>\N</m>.
      Here two-line notation is no good,
      but describing the function algebraically is often possible.
      Even tables are a little awkward,
      since they do not describe the function completely.
      For example, consider the function
      <m>f:\N \to \N</m> given by the table below.
    </p>

    <sidebyside permid="PYA">

      <tabular permid="IWR">
        <row bottom="minor">
          <cell right="minor" halign="center"><m>x</m></cell>
          <cell>0</cell>
          <cell>1</cell>
          <cell>2</cell>
          <cell>3</cell>
          <cell>4</cell>
          <cell>5</cell>
          <cell><m>\ldots</m></cell>
        </row>
        <row>
          <cell right="minor" halign="center"><m>f(x)</m></cell>
          <cell>0</cell>
          <cell>1</cell>
          <cell>4</cell>
          <cell>9</cell>
          <cell>16</cell>
          <cell>25</cell>
          <cell><m>\ldots</m></cell>
        </row>
      </tabular>

    </sidebyside>

    <p permid="SMc">
      Have I given you enough entries for you to be able to determine <m>f(6)</m>?
      You might guess that <m>f(6) = 36</m>,
      but there is no way for you to <em>know</em> this for sure.
      Maybe I am being a jerk and intended <m>f(6) = 42</m>.
      In fact, for every natural number <m>n</m>,
      there is a function that agrees with the table above,
      but for which <m>f(6) = n</m>.
    </p>

    <p permid="yTl">
      Okay, suppose I really did mean for <m>f(6) = 36</m>, and in fact,
      for the rule that you think is governing the function to actually be the rule.
      Then I should say what that rule is. <m>f(n) = n^2</m>.
      Now there is no confusion possible.
    </p>

    <p permid="fau">
          <idx><h>closed formula</h><h>for a function</h></idx>
      Giving an explicit formula that calculates the image of any element in the domain is a great way to describe a function.
      We will say that these explicit rules are
      <term>closed formulas</term> for the function.
    </p>

    <p permid="LhD">
      There is another very useful way to describe functions whose domain is <m>\N</m>,
      that rely specifically on the structure of the natural numbers.
      We can define a function <em>recursively</em>!
    </p>

    <example permid="zap">
      <statement>
        <p permid="bvU">
          Consider the function <m>f:\N \to \N</m> given by
          <m>f(0) = 0</m> and <m>f(n+1) = f(n) + 2n+1</m>.
          Find <m>f(6)</m>.
        </p>
      </statement>
      <solution permid="ecf">
        <p permid="BdX">
          The rule says that <m>f(6) = f(5) + 11</m>
          (we are using <m>6 = n+1</m> so <m>n = 5</m>).
          We don't know what <m>f(5)</m> is though.
          Well, we know that <m>f(5) = f(4) + 9</m>.
          So we need to compute <m>f(4)</m>,
          which will require knowing <m>f(3)</m>,
          which will require <m>f(2)</m>,<ellipsis /> will it ever end?
        </p>

        <p permid="hlg">
          Yes!
          In fact, this process will always end because we have <m>\N</m> as our domain,
          so there is a least element.
          And we gave the value of <m>f(0)</m> explicitly, so we are good.
          In fact, we might decide to work up to <m>f(6)</m> instead of working down from <m>f(6)</m>:
          <md permid="CxL">
            <mrow>f(1) = \amp f(0) + 1 = \amp 0 + 1 = 1</mrow>
            <mrow>f(2) = \amp f(1) + 3 = \amp 1 + 3 = 4</mrow>
            <mrow>f(3) = \amp f(2) + 5 = \amp 4 + 5 = 9</mrow>
            <mrow>f(4) = \amp f(3) + 7 = \amp 9 + 7 = 16</mrow>
            <mrow>f(5) = \amp f(4) + 9 = \amp 16 + 9 = 25</mrow>
            <mrow>f(6) = \amp f(5) + 11 = \amp 25 + 11 = 36</mrow>
          </md>
        </p>

        <p permid="Nsp">
          It looks that this recursively defined function is the same as the explicitly defined function <m>f(n) = n^2</m>.
          Is it?
          Later we will prove that it is.
        </p>
      </solution>
    </example>

    <p permid="roM">
      Recursively defined functions are often easier to create from a
      <q>real world</q> problem,
      because they describe how the values of the functions are changing.
      However, this comes with a price.
      It is harder to calculate the image of a single input,
      since you need to know the images of other (previous) elements in the domain.
    </p>

    <assemblage permid="GEO">
      <title>Recursively Defined Functions</title>
      <idx><h>recursively defined functions</h></idx>

      <p permid="XvV">
        For a function <m>f:\N \to \N</m>,
        a <term>recursive definition</term>
        consists of an <term>initial condition</term>
        together with a <term>recurrence relation</term>.
        The initial condition is the explicitly given value of <m>f(0)</m>.
        The recurrence relation is a formula for <m>f(n+1)</m> in terms for <m>f(n)</m>
        (and possibly <m>n</m> itself).
      </p>
    </assemblage>

    <example permid="fhy">
      <statement>
        <p permid="HDd">
          Give recursive definitions for the functions described below.

          <ol permid="zKj">
            <li permid="yEQ">
              <p permid="pUY">
                <m>f:\N \to \N</m> gives the number of snails in your terrarium <m>n</m> years after you built it,
                assuming you started with 3 snails and the number of snails doubles each year.
              </p>
            </li>

            <li permid="eLZ">
              <p permid="Wch">
                <m>g:\N \to \N</m> gives the number of push-ups you do <m>n</m> days after you started your push-ups challenge,
                assuming you could do 7 push-ups on day 0 and you can do 2 more push-ups each day.
              </p>
            </li>

            <li permid="KTi">
              <p permid="Cjq">
                <m>h:\N \to \N</m> defined by <m>f(n) = n!</m>.
                Recall that <m>n! = 1 \cdot 2 \cdot 3 \cdot \cdots \cdot (n-1)\cdot n</m> is the product of all numbers from <m>1</m> through <m>n</m>.
                We also define <m>0! = 1</m>.
              </p>
            </li>
          </ol>
        </p>
      </statement>
      <solution permid="Kjo">
        <p permid="tzy">
          <ol permid="vaq">
            <li permid="rar">
              <p permid="iqz">
                The initial condition is <m>f(0) = 3</m>.
                To get <m>f(n+1)</m> we would double the number of snails in the terrarium the previous year,
                which is given by <m>f(n)</m>.
                Thus <m>f(n+1) = 2f(n)</m>.
                The full recursive definition contains both of these, and would be written,
                <me permid="iEU">
                  f(0) = 3;~ f(n+1) = 2f(n)
                </me>.
              </p>
            </li>

            <li permid="XhA">
              <p permid="OxI">
                We are told that on day 0 you can do 7 push-ups, so <m>f(0) = 7</m>.
                The number of push-ups you can do on day <m>n+1</m> is 2 more than the number you can do on day <m>n</m>,
                which is given by <m>f(n)</m>.
                Thus
                <me permid="OMd">
                  f(0) = 7;~ f(n+1) = f(n) + 2
                </me>.
              </p>
            </li>

            <li permid="DoJ">
              <p permid="uER">
                Here <m>f(0) = 1</m>.
                To get the recurrence relation,
                think about how you can get
                <m>f(n+1) = (n+1)!</m> from <m>f(n) = n!</m>.
                If you write out both of these as products,
                you see that <m>(n+1)!</m> is just like <m>n!</m> except you have one more term in the product,
                an extra <m>n+1</m>.
                So we have,
                <me permid="uTm">
                  f(0) = 1;~ f(n+1) = (n+1)\cdot f(n)
                </me>.
              </p>
            </li>
          </ol>
        </p>
      </solution>
    </example>
  </subsection>

  <subsection permid="Ojn" xml:id="subsec_surj-inj-bij">
    <title>Surjections, Injections, and Bijections</title>
    <p permid="DDe">
      We now turn to investigating special properties functions might or might not possess.
    </p>

    <p permid="jKn">
      In the examples above,
      you may have noticed that sometimes there are elements of the codomain which are not in the range.
      When this sort of the thing <em>does not</em> happen,
      (that is, when everything in the codomain is in the range)
      we say the function is
      <term>onto</term>
          <idx><h>onto</h></idx>
      or that the function maps the domain
      <em>onto</em> the codomain.
      This terminology should make sense:
      the function puts the domain (entirely) on top of the codomain.
      The fancy math term for an onto function is a
      <term>surjection</term>,
          <idx><h>surjection</h></idx>
      and we say that an onto function is a
      <term>surjective</term> function.
    </p>

    <p permid="PRw">
      In pictures:
    </p>

    <sidebyside permid="Iub" widths="30% 30%" margins="auto">

      <image permid="pea" xml:id="surjective-ex">

          <latex-image>
            \begin{tikzpicture}
            \fill (-1.5, 1.2) circle (.1) (-.5,1.2) circle (.1) (.5, 1.2) circle (.1) (1.5,1.2) circle (.1);
            \draw[-&gt;] (-1.5, 1) -- (-1,0);
            \draw[-&gt;] (-.5,1) -- (0, 0);
            \draw[-&gt;] (.5, 1) -- (.9,0);
            \draw[-&gt;] (1.5,1) -- (1.1,0);
            \draw (-1, -0.2) circle (.1) (0, -0.2) circle (.1) (1, -0.2) circle (.1);
            \node[below] at (0,-.5) {Surjective};
          \end{tikzpicture}
          </latex-image>
      </image>
        <!-- <caption>Surjective.</caption> -->
      <image permid="Vlj" xml:id="non-surjective-ex">

          <latex-image>
            \begin{tikzpicture}
            \fill (-1.5, 1.2) circle (.1) (-.5,1.2) circle (.1) (.5, 1.2) circle (.1) (1.5,1.2) circle (.1);
            \draw[-&gt;] (-1.5, 1) -- (-1.1,0);
            \draw[-&gt;] (-.5,1) -- (-.9, 0);
            \draw[-&gt;] (.5, 1) -- (.9,0);
            \draw[-&gt;] (1.5,1) -- (1.1,0);
            \draw (-1, -0.2) circle (.1) (0, -0.2) circle (.1) (1, -0.2) circle (.1);
            \node[below] at (0,-.5) {Not surjective};
          \end{tikzpicture}
          </latex-image>
      </image>
        <!-- <caption>Not surjective.</caption> -->
    </sidebyside>

    <example permid="wfJ">
      <statement>
        <p permid="nKm">
          Which functions are surjective (i.e., onto)?
        </p>

        <p permid="TRv">
          <ol permid="fRs">
            <li permid="jvS"><m>f:\Z \to \Z</m> defined by <m>f(n) = 3n</m>.</li>

            <li permid="PDb">
              <m>g: \{1,2,3\} \to \{a,b,c\}</m> defined by <m>g = \begin{pmatrix}1 \amp 2 \amp 3 \\ c \amp a \amp a \end{pmatrix}</m>.
            </li>

            <li permid="vKk">
              <p permid="aMa">
                <m>h:\{1,2,3\} \to \{1,2,3\}</m> defined as follows:
              </p>

              <sidebyside permid="oBk" width="20%">

                <image permid="zDf" xml:id="ex-surj-q">

                  <latex-image>
                    \begin{tikzpicture}
          \draw[-&gt;] (-1,1) node[above] {1} -- (0,0) node[below] {2};
          \draw[-&gt;] (0,1) node[above] {2} -- (-1,0) node[below] {1};
          \draw[-&gt;] (1,1) node[above] {3} -- (1,0) node[below] {3};
        \end{tikzpicture}
                  </latex-image>
                </image>

              </sidebyside>

            </li>
          </ol>
        </p>
      </statement>
      <solution permid="qqx">
        <p permid="ZGH">
          <ol permid="bhz">
            <li permid="bRt">
              <m>f</m> is not surjective.
              There are elements in the codomain which are not in the range.
              For example, no <m>n \in \Z</m> gets mapped to the number 1
              (the rule would say that <m>\frac{1}{3}</m> would be sent to 1, but
              <m>\frac{1}{3}</m> is not in the domain).
              In fact, the range of the function is <m>3\Z</m>
              (the integer multiples of 3),
              which is not equal to <m>\Z</m>.
            </li>

            <li permid="HYC">
              <m>g</m> is not surjective.
              There is no <m>x \in \{1,2,3\}</m>
              (the domain)
              for which <m>g(x) = b</m>,
              so <m>b</m>, which is in the codomain, is not in the range.
              Notice that there is an element from the codomain <q>missing</q>
              from the bottom row of the matrix.
            </li>

            <li permid="ofL">
              <m>h</m> is surjective.
              Every element of the codomain is also in the range.
              Nothing in the codomain is missed.
            </li>
          </ol>
        </p>
      </solution>
    </example>

    <p permid="vYF">
      To be a function,
      a rule cannot assign a single element of the domain to two or more different elements of the codomain.
      However, we have seen that the reverse
      <em>is</em> permissible:
      a function might assign the same element of the codomain to two or more different elements of the domain.
      When this <em>does not</em> occur
      (that is, when each element of the codomain is the image of at most one element of the domain)
      then we say the function is
      <term>one-to-one</term>.
          <idx><h>one-to-one</h></idx>
      Again, this terminology makes sense:
      we are sending at most one element from the domain to one element from the codomain.
      One input to one output.
      The fancy math term for a one-to-one function is an
      <term>injection</term>.
          <idx><h>injection</h></idx>
      We call one-to-one functions
      <term>injective</term> functions.
    </p>

    <p permid="cfO">
      In pictures:
    </p>

    <sidebyside permid="UIt" widths="40% 40%" margins="auto">

      <image permid="Bss" xml:id="injective-ex">

          <latex-image>
            \begin{tikzpicture}
            \fill (-1.5, 1.2) circle (.1) (-.5,1.2) circle (.1) (.5, 1.2) circle (.1) (1.5,1.2) circle (.1);
            \draw[-&gt;] (-1.5, 1) -- (-2,0);
            \draw[-&gt;] (-.5,1) -- (-1, 0);
            \draw[-&gt;] (.5, 1) -- (1,0);
            \draw[-&gt;] (1.5,1) -- (2,0);
            \draw (-2, -0.2) circle (.1) (-1, -.2) circle (.1) (0, -0.2) circle (.1) (1, -0.2) circle (.1) (2, -0.2) circle (.1);
              \node[below] at (0,-.5) {Injective};
          \end{tikzpicture}
          </latex-image>
      </image>
        <!-- <caption>Injective.</caption> -->
      <image permid="hzB" xml:id="non-injective-ex">

          <latex-image>
            \begin{tikzpicture}
              \fill (-1.5, 1.2) circle (.1) (-.5,1.2) circle (.1) (.5, 1.2) circle (.1) (1.5,1.2) circle (.1);
              \draw[-&gt;] (-1.5, 1) -- (-2,0);
              \draw[-&gt;] (-.5,1) -- (-1, 0);
              \draw[-&gt;] (.5, 1) -- (.9,0);
              \draw[-&gt;] (1.5,1) -- (1.1,0);
              \draw (-2, -0.2) circle (.1) (-1, -.2) circle (.1) (0, -0.2) circle (.1) (1, -0.2) circle (.1) (2, -0.2) circle (.1);
                \node[below] at (0,-.5) {Not injective};
            \end{tikzpicture}
          </latex-image>
      </image>
        <!-- <caption>
            Not injective.
        </caption> -->
    </sidebyside>

    <example permid="cmS">
      <statement>
        <p permid="zYE">
          Which functions are injective (i.e., one-to-one)?
        </p>

        <p permid="gfN">
          <ol permid="LYB">
            <li permid="UmU"><m>f:\Z \to \Z</m> defined by <m>f(n) = 3n</m>.</li>

            <li permid="Aud">
              <m>g: \{1,2,3\} \to \{a,b,c\}</m> defined by <m>g = \begin{pmatrix}1 \amp 2 \amp 3 \\ c \amp a \amp a \end{pmatrix}</m>.
            </li>

            <li permid="gBm">
              <p permid="GTj">
                <m>h:\{1,2,3\} \to \{1,2,3\}</m> defined as follows:
              </p>

              <sidebyside permid="APC" width="20%">

                <image permid="fKo">

            <latex-image>
              \begin{tikzpicture}
                \draw[-&gt;] (-1,1) node[above] {1} -- (0,0) node[below] {2};
                \draw[-&gt;] (0,1) node[above] {2} -- (-1,0) node[below] {1};
                \draw[-&gt;] (1,1) node[above] {3} -- (1,0) node[below] {3};
              \end{tikzpicture}
            </latex-image>
                </image>

              </sidebyside>

            </li>
          </ol>
        </p>
      </statement>
      <solution permid="WxG">
        <p permid="FNQ">
          <ol permid="HoI">
            <li permid="MIv">
              <m>f</m> is injective.
              Each element in the codomain is assigned to at <em>most</em>
              one element from the domain.
              If <m>x</m> is a multiple of three,
              then only <m>x/3</m> is mapped to <m>x</m>.
              If <m>x</m> is not a multiple of 3, then there is no input corresponding to the output <m>x</m>.
            </li>

            <li permid="sPE">
              <m>g</m> is not injective.
              Both inputs <m>2</m> and <m>3</m> are assigned the output <m>a</m>.
              Notice that there is an element from the codomain that appears more than once on the bottom row of the matrix.
            </li>

            <li permid="YWN">
              <m>h</m> is injective.
              Each output is only an output once.
            </li>
          </ol>
        </p>
      </solution>
    </example>

    <p permid="ImX">
      Be careful: <q>surjective</q> and
      <q>injective</q> are NOT opposites.
      You can see in the two examples above that there are functions which are surjective but not injective,
      injective but not surjective, both, or neither.
      In the case when a function is both one-to-one and onto
      (an injection and surjection),
      we say the function is a
      <term>bijection</term>,
          <idx><h>bijection</h></idx>
      or that the function is a
      <term>bijective</term> function.
    </p>

    <p permid="oug">
      To illustrate the contrast between these two properties,
      consider a more formal definition of each, side by side.
    </p>

    <assemblage permid="mLX">
      <title>Injective vs Surjective</title>
      <p permid="UBp">
        A function is <term>injective</term>
        provided every element of the codomain is the image of <em>at most</em>
        one element from the domain.
      </p>

      <p permid="AIy">
        A function is <term>surjective</term>
        provided every element of the codomain is the image of <em>at least</em>
        one element from the domain.
      </p>
    </assemblage>

    <p permid="gPH">
      Notice both properties are determined by what happens to elements of the codomain:
      they could be repeated as images or they could be <q>missed</q>
      (not be images).
      Injective functions do not have repeats but might or might not miss elements.
      Surjective functions do not miss elements,
      but might or might not have repeats.
      The bijective functions are those that do not have repeats and do not miss elements.
    </p>
  </subsection>
<!-- Modify this to include the image of a set.  Then make some exercises about it -->
  <subsection permid="uqw">
    <title>Image and Inverse Image</title>
    <p permid="MWQ">
      When discussing functions,
      we have notation for talking about an element of the domain
      (say <m>x</m>)
      and its corresponding element in the codomain (we write <m>f(x)</m>,
      which <em>is</em> the image of <m>x</m>).
      Sometimes we will want to talk about all the elements that are images of some subset of the domain.
      It would also be nice to start with some element of the codomain
      (say <m>y</m>)
      and talk about which element or elements
      (if any)
      from the domain it is the image of.
      We could write <q>those <m>x</m> in the domain such that <m>f(x) = y</m>,</q>
      but this is a lot of writing.
      Here is some notation to make our lives easier.
    </p>

    <p permid="tdZ">
      To address the first situation,
      what we are after is a way to describe the <em>set</em>
      of images of elements in some subset of the domain.
      Suppose <m>f:X \to Y</m> is a function and that
      <m>A \subseteq X</m> is some subset of the domain
      (possibly all of it).
      We will use the notation <m>f(A)</m> to denote the
      <term>image of <m>A</m> under <m>f</m></term>,
      namely the set of elements in <m>Y</m> that are the image of elements from <m>A</m>.
      That is, <m>f(A) = \{f(a) \in Y \st a \in A\}</m>.

      <notation>
        <usage>f(A)</usage>
        <description>the image of <m>A</m> under <m>f</m>.</description>
      </notation>

    </p>

    <p permid="Zli">
      We can do this in the other direction as well.
      We might ask which elements of the domain get mapped to a particular set in the codomain.
      Let <m>f:X \to Y</m> be a function and suppose
      <m>B \subseteq Y</m> is a subset of the codomain.
      Then we will write <m>f\inv(B)</m> for the
      <term>inverse image of <m>B</m> under <m>f</m></term>,
      namely the set of elements in <m>X</m> whose image are elements in <m>B</m>.
      In other words, <m>f\inv(B) = \{x \in X \st f(x) \in B\}</m>.

      <notation>
        <usage>f\inv(B)</usage>
        <description>the inverse image of <m>B</m> under <m>f</m>.</description>
      </notation>

    </p>

    <p permid="Fsr">
      Often we are interested in the element(s) whose image is a particular element <m>y</m> of in the codomain.
      The notation above works:
      <m>f\inv(\{y\})</m> is the set of all elements in the domain that <m>f</m> sends to <m>y</m>.
      It makes sense to think of this as a set:
      there might not be anything sent to <m>y</m>
      (if <m>y</m> is not in the range),
      in which case <m>f\inv(\{y\}) = \emptyset</m>.
      Or <m>f</m> might send multiple elements to <m>y</m>
      (if <m>f</m> is not injective).
      As a notational convenience,
      we usually drop the set braces around the <m>y</m> and write
      <m>f\inf(y)</m> instead for this set.
    </p>

    <p permid="lzA">
      WARNING: <m>f\inv(y)</m> is not an inverse function!
      Inverse functions only exist for bijections,
      but <m>f\inv(y)</m> is defined for any function <m>f</m>.
      The point: <m>f\inv(y)</m> is a <em>set</em>,
      not an <em>element</em> of the domain.
      This is just sloppy notation for <m>f\inv(\{y\})</m>.
      To help make this distinction,
      we would call <m>f\inv(y)</m> the
      <term>complete inverse image of <m>y</m> under <m>f</m></term>.
      It is not the image of <m>y</m> under <m>f\inv</m>
      (since the function <m>f\inv</m> might not exist).
    </p>

    <example permid="gWL">
      <statement>
        <p permid="MmW">
          Consider the function <m>f:\{1,2,3,4,5,6\} \to \{a,b,c,d\}</m> given by
          <me permid="bav">
            f = \begin{pmatrix}1 \amp 2 \amp 3 \amp 4 \amp 5 \amp 6 \\ a \amp a \amp b \amp b \amp b \amp c\end{pmatrix}
          </me>.
          Find <m>f(\{1,2,3\})</m>, 
          <m>f\inf(\{a,b\})</m>, and <m>f\inv(d)</m>.
        </p>
      </statement>
      <solution permid="CEP">
        <p permid="lUZ">
          <m>f(\{1,2,3\}) = \{a,b\}</m> since <m>a</m> and <m>b</m> are the elements in the codomain to which <m>f</m> sends <m>1</m> and <m>2</m>.
        </p>

        <p permid="Sci">
          <m>f\inf(\{a,b\}) = \{1,2,3,4,5\}</m> since these are exactly the elements that <m>f</m> sends to <m>a</m> and <m>b</m>.
        </p>

        <p permid="yjr">
          <m>f\inf(d) = \emptyset</m> since <m>d</m> is not in the range of <m>f</m>.
        </p>
      </solution>
    </example>

    <example permid="NdU">
      <statement>
        <p permid="suf">
          Consider the function <m>g:\Z \to \Z</m> defined by <m>g(n) = n^2 + 1</m>.
          Find <m>g(1)</m> and <m>g(\{1\})</m>.
          Then find <m>g\inv(1)</m>,
          <m>g\inv(2)</m>, and <m>g\inv(3)</m>.
        </p>
      </statement>
      <solution permid="iLY">
        <p permid="eqA">
          Note that <m>g(1) \ne g(\{1\})</m>.
          The first is an element: <m>g(1) = 2</m>.
          The second is a set: <m>g(\{1\}) = \{2\}</m>.
        </p>

        <p permid="KxJ">
          To find <m>g\inv(1)</m>,
          we need to find all integers <m>n</m> such that <m>n^2 + 1 = 1</m>.
          Clearly only 0 works, so <m>g\inv(1) = \{0\}</m>
          (note that even though there is only one element,
          we still write it as a set with one element in it).
        </p>

        <p permid="qES">
          To find <m>g\inv(2)</m>,
          we need to find all <m>n</m> such that <m>n^2 + 1 = 2</m>.
          We see <m>g\inv(2) = \{-1,1\}</m>.
        </p>

        <p permid="WMb">
          Finally, if <m>n^2 + 1 = 3</m>,
          then we are looking for an <m>n</m> such that <m>n^2 = 2</m>.
          There are no such integers so <m>g\inv(3) = \emptyset</m>.
        </p>
      </solution>
    </example>

    <p permid="RGJ">
      Since <m>f\inv(y)</m> is a set,
      it makes sense to ask for <m>\card{f\inv(y)}</m>,
      the number of elements in the domain which map to <m>y</m>.
    </p>

    <example permid="tld">
      <statement>
        <p permid="YBo">
          Find a function <m>f:\{1,2,3,4,5\} \to \N</m> such that <m>\card{f\inv(7)} = 5</m>.
        </p>
      </statement>
      <solution permid="OTh">
        <p permid="CTk">
          There is only one such function.
          We need five elements of the domain to map to the number <m>7 \in \N</m>.
          Since there are only five elements in the domain,
          all of them must map to 7.
          So
          <me permid="HhE">
            f = \begin{pmatrix}1 \amp 2 \amp 3 \amp 4 \amp 5 \\ 7 \amp 7 \amp 7 \amp 7 \amp 7\end{pmatrix}
          </me>.
        </p>
      </solution>
    </example>

    <paragraphs permid="axF">
      <title>Function Definitions</title>
      <p permid="xNS">
        Here is a summary of all the main concepts and definitions we use when working with functions.

        <ul permid="sfK">
          <li permid="YmT">
            <p permid="nas">
              A
              <term>function</term> is a rule that assigns each element of a set,
              called the
              <term>domain</term>, to exactly one element of a second set,
              called the
              <term>codomain</term>.
            </p>
          </li>

          <li permid="Euc">
            <p permid="ThB">
              Notation: <m>f:X \to Y</m> is our way of saying that the function is called <m>f</m>,
              the domain is the set <m>X</m>,
              and the codomain is the set <m>Y</m>.
            </p>
          </li>

          <li permid="kBl">
            <p permid="zoK">
              To specify the rule for a function with small domain, use
              <term>two-line notation</term> by writing a matrix with each output directly below its corresponding input, as in:
              <me permid="noN">
                f = \begin{pmatrix}1 \amp 2 \amp 3 \amp 4 \\ 2 \amp 1 \amp 3 \amp 1 \end{pmatrix}
              </me>.
            </p>
          </li>

          <li permid="QIu">
            <p permid="fvT">
              <m>f(x) = y</m> means the element <m>x</m> of the domain (input) is assigned to the element <m>y</m> of the codomain.
              We say <m>y</m> is an output.
              Alternatively, we call <m>y</m> the
              <term>image of <m>x</m> under <m>f</m></term>.
            </p>
          </li>

          <li permid="wPD">
            <p permid="LDc">
              The
              <term>range</term> is a subset of the codomain.
              It is the set of all elements which are assigned to at least one element of the domain by the function.
              That is, the range is the set of all outputs.
            </p>
          </li>

          <li permid="cWM">
            <p permid="rKl">
              A function is
              <term>injective</term> (an
              <term>injection</term> or
              <term>one-to-one</term>) if every element of the codomain is the image of
              <term>at most</term> one element from the domain.
            </p>
          </li>

          <li permid="JdV">
            <p permid="XRu">
              A function is
              <term>surjective</term> (a
              <term>surjection</term> or
              <term>onto</term>) if every element of the codomain is the image of
              <term>at least</term> one element from the domain.
            </p>
          </li>

          <li permid="ple">
            <p permid="DYD">
              A
              <term>bijection</term> is a function which is both an injection and surjection.
              In other words, if every element of the codomain is the image of
              <term>exactly one</term> element from the domain.
            </p>
          </li>

          <li permid="Vsn">
            <p permid="kfM">
              The <term>image</term> of an element <m>x</m> in the domain is the element <m>y</m> in the codomain that <m>x</m> is mapped to.
              That is, the image of <m>x</m> under <m>f</m> is <m>f(x)</m>.
            </p>
          </li>

          <li permid="Bzw">
            <p permid="QmV">
              The
              <term>complete inverse image</term>
              of an element <m>y</m> in the codomain, written <m>f\inv(y)</m>,
              is the <em>set</em> of all elements in the domain which are assigned to <m>y</m> by the function.
            </p>
          </li>

          <li permid="hGF">
            <p permid="wue">
              The <term>image</term> of a subset <m>A</m> of the domain is the set <m>f(A) = \{f(a) \in Y \st a \in A\}</m>.
            </p>
          </li>

          <li permid="NNO">
            <p permid="cBn">
              The <term>inverse image</term> of a a subset <m>B</m> of the codomain is the set <m>f\inv(B) = \{x \in X \st f(x) \in B\}</m>.
            </p>
          </li>
        </ul>
      </p>
    </paragraphs>

  </subsection>
<!-- <xi:include href="practice/intro-functions.ptx"/> -->
  <xi:include href="exercises/intro-functions.ptx"/>
</section>

