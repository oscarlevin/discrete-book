<?xml version="1.0" encoding="UTF-8"?>


<section xml:id="sec_counting-combperm" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Combinations and Permutations</title>
  <investigation>
    <p>
      You have a bunch of chips which come in five different colors: red, blue, green, purple and yellow.

      <ol>

        <li>
          <p>
            How many different two-chip stacks can you make if the bottom chip must be red or blue? Explain your answer using both the additive and multiplicative principles.
          </p>
        </li>

        <li>
          <p>
            How many different three-chip stacks can you make if the bottom chip must be red or blue and the top chip must be green, purple or yellow? How does this problem relate to the previous one?
          </p>
        </li>

        <li>
          <p>
            How many different three-chip stacks are there in which no color is repeated? What about four-chip stacks?
          </p>
        </li>

        <li>
          <p>
            Suppose you wanted to take three different colored chips and put them in your pocket. How many different choices do you have? What if you wanted four different colored chips? How do these problems relate to the previous one?
          </p>
        </li>

      </ol>
    </p>
  </investigation>

  <p>
    A <term>permutation</term> is a (possible) rearrangement of objects. For example, there are 6 permutations of the letters <em>a, b, c</em>:
    <me>
      abc, ~~ acb, ~~ bac, ~~bca, ~~ cab, ~~ cba.
    </me>
  </p>

  <p>
    We know that we have them all listed above
    <mdash />there are 3 choices for which letter we put first, then 2 choices for which letter comes next, which leaves only 1 choice for the last letter. The multiplicative principle says we multiply <m>3\cdot 2 \cdot 1</m>.
  </p>

  <example>
    <statement>
      <p>
        How many permutations are there of the letters <em>a, b, c, d, e, f</em>?
      </p>
    </statement>
    <solution>
      <p>
        We do NOT want to try to list all of these out. However, if we did, we would need to pick a letter to write down first. There are 6 choices for that letter. For each choice of first letter, there are 5 choices for the second letter (we cannot repeat the first letter; we are rearranging letters and only have one of each), and for each of those, there are 4 choices for the third, 3 choices for the fourth, 2 choices for the fifth and finally only 1 choice for the last letter. So there are <m>6 \cdot 5 \cdot 4 \cdot 3 \cdot 2 \cdot 1 = 720</m> permutations of the 6 letters.
      </p>
    </solution>
  </example>

  <p> A piece of notation is helpful here: <m>n!</m>, read <q><m>n</m> factorial</q>,<index><main>factorial</main></index> is the product of all positive integers less than or equal to <m>n</m> (for reasons of convenience, we also define 0! to be 1). So the number of permutation of 6 letters, as seen in the previous example is <m>6! = 6\cdot 5 \cdot 4 \cdot 3 \cdot 2 \cdot 1</m>. This generalizes:</p>

    <assemblage>
      <title>Permutations of <m>n</m> elements</title>
      <p>
        There are <m>n! = n\cdot (n-1)\cdot (n-2)\cdot \cdots \cdot 2\cdot 1</m> permutations of <m>n</m> (distinct) elements.
      </p>
    </assemblage>

    <example xml:id="example-counting-functions-bijective">
      <title>Counting Bijective Functions</title>
      <statement>
        <p>
          How many functions <m>f:\{1,2,\ldots,8\} \to \{1,2,\ldots, 8\}</m> are <em>bijective</em>?
        </p>
      </statement>

      <solution>
        <p>
          Remember what it means for a function to be bijective: each element in the codomain must be the image of exactly one element of the domain. Using two-line notation, we could write one of these bijections as
          <me>
            f = \twoline{1 \amp 2 \amp 3 \amp 4 \amp 5 \amp 6 \amp 7 \amp 8} {3 \amp 1 \amp 5 \amp 8 \amp 7 \amp 6 \amp 2 \amp 4}
          </me>
          What we are really doing is just rearranging the elements of the codomain, so we are creating a permutation of 8 elements. In fact, <q>permutation</q> is another term used to describe bijective functions from a finite set to itself.
        </p>

        <p>
          If you believe this, then you see the answer must be <m>8! = 8 \cdot 7 \cdot\cdots\cdot 1 = 40320</m>. You can see this directly as well: for each element of the domain, we must pick a distinct element of the codomain to map to. There are 8 choices for where to send 1, then 7 choices for where to send 2, and so on. We multiply using the multiplicative principle.
        </p>
      </solution>
</example>


      <p>
        Sometimes we do not want to permute all of the letters/numbers/elements we are given.
      </p>
      <example>
        <statement>
          <p>
            How many 4 letter <q>words</q> can you make from the letters <em>a</em> through <em>f</em>, with no repeated letters?
          </p>
        </statement>
        <solution>
          <p>
            This is just like the problem of permuting 4 letters, only now we have more choices for each letter. For the first letter, there are 6 choices. For each of those, there are 5 choices for the second letter. Then there are 4 choices for the third letter, and 3 choices for the last letter. The total number of words is <m>6\cdot 5\cdot 4 \cdot 3 = 360</m>. This is not <m>6!</m> because we never multiplied by 2 and 1. We could start with <m>6!</m> and then cancel the 2 and 1, and thus write <m>\frac{6!}{2!}</m>.
          </p>
        </solution>
      </example>


      <p>
        In general, we can ask how many permutations exist of <m>k</m> objects choosing those objects from a larger collection of <m>n</m> objects. (In the example above, <m>k = 4</m>, and <m>n = 6</m>.) We write this number <m>P(n,k)</m> and sometimes call it a <term><m>k</m>-permutation of <m>n</m> elements</term>. From the example above, we see that to compute <m>P(n,k)</m> we must apply the multiplicative principle to <m>k</m> numbers, starting with <m>n</m> and counting backwards. For example
        <me>
          P(10, 4) = 10\cdot 9 \cdot 8 \cdot 7.
        </me>
      </p>

      <p>
        Notice again that <m>P(10,4)</m> starts out looking like <m>10!</m>, but we stop after 7. We can formally account for this <q>stopping</q> by dividing away the part of the factorial we do not want:
        <me>
          P(10,4) = \frac{10\cdot 9 \cdot 8 \cdot 7 \cdot 6 \cdot 5 \cdot 4 \cdot 3 \cdot 2 \cdot 1}{6 \cdot 5 \cdot 4 \cdot 3 \cdot 2 \cdot 1} = \frac{10!}{6!}.
        </me>
      </p>

      <p>
        Careful: The factorial in the denominator is not <m>4!</m> but rather <m>(10-4)!</m>.
      </p>
      <assemblage>
        <title><m>k</m>-permutations of <m>n</m> elements</title>
        <p>
          <index><main><em>k</em>-permutation</main></index><index><main>permutation</main></index>
          <m>P(n,k)</m> is the number of <term><m>k</m>-permutations of <m>n</m> elements</term>, the number of ways to <em>arrange</em> <m>k</m> objects chosen from <m>n</m> distinct objects.
          <me>
            P(n,k) = \frac{n!}{(n-k)!}.
          </me>
        </p>
      </assemblage>

      <p>
        Note that when <m>n = k</m>, we have <m>P(n,n) = \frac{n!}{(n-n)!} = n!</m> (since we defined <m>0!</m> to be 1). This makes sense
        <mdash />we already know <m>n!</m> gives the number of permutations of all <m>n</m> objects.
      </p>

      <example xml:id="example-counting-functions-injective">
        <title>Counting injective functions</title>
        <statement>
          <p>How many functions <m>f:\{1,2,3\} \to \{1,2,3,4,5,6,7,8\}</m> are <em>injective</em>?</p>
        </statement>
        <solution>
          <p>
            Note that it doesn't make sense to ask for the number of <em>bijections</em> here, as there are none (because the codomain is larger than the domain, there are no surjections). But for a function to be injective, we just can't use an element of the codomain more than once.
          </p>
          <p>
            We need to pick an element from the codomain to be the image of 1. There are 8 choices. Then we need to pick one of the remaining 7 elements to be the image of 2. Finally, one of the remaining 6 elements must be the image of 3. So the total number of functions is <m>8\cdot 7 \cdot 6 = P(8,3)</m>.
          </p>

          <p>
            What this demonstrates in general is that the number of injections <m>f:A \to B</m>, where <m>\card{A} = k</m> and <m>\card{B} = n</m>, is <m>P(n,k)</m>.
          </p>
        </solution>
</example>


        <p>
          Here is another way to find the number of <m>k</m>-permutations of <m>n</m> elements: first select which <m>k</m> elements will be in the permutation, then count how many ways there are to arrange them. Once you have selected the <m>k</m> objects, we know there are <m>k!</m> ways to arrange (permute) them. But how do you select <m>k</m> objects from the <m>n</m>? You have <m>n</m> objects, and you need to <em>choose</em> <m>k</m> of them. You can do that in <m>{n \choose k}</m> ways. Then for each choice of those <m>k</m> elements, we can permute <em>them</em> in <m>k!</m> ways. Using the multiplicative principle, we get another formula for <m>P(n,k)</m>:
          <me>
            P(n,k) = {n \choose k}\cdot k!.
          </me>
        </p>

        <p>
          Now since we have a closed formula for <m>P(n,k)</m> already, we can substitute that in:
          <me>
            \frac{n!}{(n-k)!} = {n \choose k} \cdot k!.
          </me>
        </p>

        <p>
          If we divide both sides by <m>k!</m> we get a closed formula for <m>{n \choose k}</m>.
        </p>

        <assemblage>
          <title>Closed formula for <m>{n \choose k}</m></title>
          <p>
            <me>
              {n \choose k} = \frac{n!}{(n-k)!k!}
            </me>
          </p>
        </assemblage>


        <p>
          We say <m>P(n,k)</m> counts <em>permutations</em>, and <m>{n \choose k}</m> counts <em>combinations</em><index><main>combination</main></index>. The formulas for each are very similar, there is just an extra <m>k!</m> in the denominator of <m>{n \choose k}</m>. That extra <m>k!</m> accounts for the fact that <m>{n \choose k}</m> does not distinguish between the different orders that the <m>k</m> objects can appear in. We are just selecting (or choosing) the <m>k</m> objects, not arranging them. Perhaps <q>combination</q> is a misleading label. We don't mean it like a combination lock (where the order would definitely matter). Perhaps a better metaphor is a combination of flavors
          <mdash /> you just need to decide which flavors to combine, not the order in which to combine them.
        </p>

        <p>
          To further illustrate the connection between combinations and permutations, we close with an example.
        </p>
        <example>
          <statement>
            <p>
              You decide to have a dinner party. Even though you are incredibly popular and have 14 different friends, you only have enough chairs to invite 6 of them.
            </p>

            <ol>
              <li>
<p>
How many choices do you have for which 6 friends to invite?
</p>
</li>
              <li>
<p>
What if you need to decide not only which friends to invite but also where to seat them along your long table?  How many choices do you have then?
</p>
</li>
            </ol>
          </statement>
          <solution>
            <ol>
              <li>
<p>
You must simply choose 6 friends from a group of 14.  This can be done in <m>{14 \choose 6}</m> ways.  We can find this number either by using Pascal's triangle or the closed formula: <m>\frac{14!}{8!\cdot 6!} = 3003</m>.
</p>
</li>
              <li>
<p>
Here you must count all the ways you can permute 6 friends chosen from a group of 14.  So the answer is <m>P(14, 6)</m>, which can be calculated as <m>\frac{14!}{8!} = 2192190</m>.
</p>

<p>
  Notice that we can think of this counting problem as a question about counting functions: how many injective functions are there from your set of 6 chairs to your set of 14 friends (the functions are injective because you can't have a single chair go to two of your friends).
</p>
</li>
            </ol>

            <p>
              How are these numbers related? Notice that <m>P(14,6)</m> is <em>much</em> larger than <m>{14 \choose 6}</m>. This makes sense. <m>{14 \choose 6}</m> picks 6 friends, but <m>P(14,6)</m> arranges the 6 friends as well as picks them. In fact, we can say exactly how much larger <m>P(14,6)</m> is. In both counting problems we choose 6 out of 14 friends. For the first one, we stop there, at 3003 ways. But for the second counting problem, each of those 3003 choices of 6 friends can be arranged in exactly <m>6!</m> ways. So now we have <m>3003\cdot 6!</m> choices and that is exactly <m>2192190</m>.
            </p>

            <p>
              Alternatively, look at the first problem another way. We want to select 6 out of 14 friends, but we do not care about the order they are selected in. To select 6 out of 14 friends, we might try this:
              <me>
                14 \cdot 13 \cdot 12 \cdot 11 \cdot 10 \cdot 9.
              </me>
            </p>

            <p>
              This is a reasonable guess, since we have 14 choices for the first guest, then 13 for the second, and so on. But the guess is wrong (in fact, that product is exactly <m>2192190 = P(14,6)</m>). It distinguishes between the different orders in which we could invite the guests. To correct for this, we could divide by the number of different arrangements of the 6 guests (so that all of these would count as just one outcome). There are precisely <m>6!</m> ways to arrange 6 guests, so the correct answer to the first question is
              <me>
                \frac{14 \cdot 13 \cdot 12 \cdot 11\cdot 10 \cdot 9}{6!}.
              </me>
            </p>

            <p>
              Note that another way to write this is
              <me>
                \frac{14!}{8!\cdot 6!}.
              </me>
              which is what we had originally.
            </p>
          </solution>
        </example>




 <xi:include href="exercises/counting-combperm.mbx" />

</section>
