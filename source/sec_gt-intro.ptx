<?xml version="1.0" encoding="UTF-8"?>

<section xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sec_gt-intro">
  <title>Problems and Definitions</title>
  <objectives>
		<introduction>
			<p>
				After completing this section, you should be able to do the following.
			</p>
		</introduction>
		<ol>
			<li>
				<p>
          Use the language of graph theory to describe properties of graphs.
				</p>
			</li>

			<li>
				<p>
          Utilize multiple representations of graphs.
				</p>
			</li> 
			<li>
				<p>
          Apply the Handshake Lemma to answer questions about graphs and problems they represent.
				</p>
			</li>
		</ol>
	</objectives>
  <clearpage/>
  <subsection xml:id="subsec-gt-intro-preview">
    <title>Section Preview</title>
    <investigation>
      <idx><h>Seven Bridges of Königsberg</h></idx>
      <idx><h>Königsberg, Seven Bridges of</h></idx>
      <idx><h>puzzle</h><h>seven bridges</h></idx>
        <p>
          In the time of Euler, in the town of Königsberg in Prussia,
          there was a river containing two islands.
          The islands were connected to the banks of the river by seven bridges
          (as seen below).
          The bridges were very beautiful, and on their days off,
          townspeople would spend time walking over the bridges.
          As time passed, a question arose:
          Was it possible to plan a walk so that you cross each bridge once and only once?
          Euler was able to answer this question.
          Are you?
        </p>
  
        <sidebyside width="75%">
  
          <image xml:id="gt-bridges-art">
  
            <latex-image>
              \begin{tikzpicture}[scale=0.9]
                \definecolor{land}{HTML}{313106}
                \definecolor{water}{HTML}{9fc5e8}
                \definecolor{bridge}{HTML}{989393}
                \clip (-6,-2.8) rectangle (5.9,2.5);
                \fill[color=water] (-6,-1.3) rectangle (5.5,1.19);
                \draw[thick, fill=land] plot[smooth cycle] coordinates {(0,0) (-.5, .5) (-1,.6) (-2, .7) (-3,.5) (-3.3, -.7) (-2.8, -.8) (-1,-.7) (-.3, -.5)};
                \draw[thick, fill=land] plot[smooth cycle] coordinates {(.5,0) (.4,.5) (1,.6) (2,.5) (2.7,0) (2.9,-.6) (2,-.8) (1,-.5) (.7,-.4)};
                \shade[bottom color=land, top color=white!90!land] plot[smooth] coordinates {(-6,.2) (-4.5,.4) (-3,1) (0,.8) (1.5,1) (3,.5) (5.5,.2)} -- plot coordinates {(5.5,3) (-6,3)};
                \draw[thick] plot[smooth] coordinates {(-6,.2) (-4.5,.4) (-3,1) (0,.8) (1.5,1) (3,.5) (5.5,.2)};
                \shade[top color=land, bottom color=white!75!land] plot[smooth] coordinates {(-6,-.7) (-4.5,-.6) (-3,-1.2) (0,-1) (3,-1.1) (5,-.8) (5.5,-.7)} -- plot coordinates {(5.5,-3) (-6,-3)};
                \draw[thick] plot[smooth] coordinates {(-6,-.7) (-4.5,-.6) (-3,-1.2) (0,-1) (3,-1.1) (5,-.8) (5.5,-.7)};
                \path[fill=bridge] (-.3,.1) to[out=-10, in=190] (.8,.1) -- (.7, -.2) to[out=170, in=10] (-.35,-.2) -- cycle;
                \draw[thick] (-.3,.1) to[out=-10, in=190] (.8,.1) (.7, -.2) to[out=170, in=10] (-.35,-.2);
                \path[fill=bridge] (1.75,-1.5) to[out=100, in=260] (1.85,-.5) -- (1.55, -.4) to[out=280, in=80] (1.5,-1.4) -- cycle;
                \draw[thick] (1.75,-1.5) to[out=100, in=260] (1.85,-.5) (1.55, -.4) to[out=280, in=80] (1.5,-1.4);
  
                \path[fill=bridge] (1.6,.35) to[out=100, in=280] (1.35,1.3) -- (1.1, 1.2) to[out=300, in=110] (1.4,.3) -- cycle;
                \draw[thick] (1.6,.35) to[out=100, in=280] (1.35,1.3) (1.1, 1.2) to[out=300, in=110] (1.4,.3);
  
                \path[fill=bridge] (-.7,.35) to[out=70, in=240] (-.3,1.1) -- (-.5, 1.2) to[out=250, in=60] (-.9,.45) -- cycle;
                \draw[thick] (-.7,.35) to[out=70, in=240] (-.3,1.1) (-.5, 1.2) to[out=250, in=60] (-.9,.45);
  
                \path[fill=bridge] (-2.05,.5) to[out=105, in=270] (-2.15,1.4) -- (-2.4, 1.35) to[out=280, in=90] (-2.3,.45) -- cycle;
                \draw[thick] (-2.05,.5) to[out=105, in=270] (-2.15,1.4) (-2.4, 1.35) to[out=280, in=90] (-2.3,.45);
  
                \path[fill=bridge] (-2.75,-1.5) to[out=85, in=250] (-2.5,-.6) -- (-2.75, -.5) to[out=260, in=75] (-3,-1.45) -- cycle;
                \draw[thick] (-2.75,-1.5) to[out=85, in=250] (-2.5,-.6) (-2.75, -.5) to[out=260, in=75] (-3,-1.45);
  
                \path[fill=bridge] (-.7,-1.5) to[out=100, in=260] (-.7,-.5) -- (-1, -.55) to[out=280, in=80] (-1,-1.45) -- cycle;
                \draw[thick] (-.7,-1.5) to[out=100, in=260] (-.7,-.5) (-1, -.55) to[out=280, in=80] (-1,-1.45);
              \end{tikzpicture}
            </latex-image>
            <description>Drawing of a river (blue) running left to right with two islands. There are 7 bridges over the river: two from the top bank to the left island, two from the left island to the bottom bank, and a bridge from the right island to each of the top bank, bottom bank, and left island.</description>
  
          </image>
  
        </sidebyside>
      </investigation>
      <p>
        Graph Theory is a relatively new area of mathematics,
        first studied by the super famous mathematician Leonhard Euler in 1735.
        Since then it has blossomed into a powerful tool used in nearly every branch of science and is currently an active area of mathematics research.
      </p>
  
      <p>
        The problem above, known as the
        <em>Seven Bridges of Königsberg</em>,
        is the problem that originally inspired graph theory.
        Consider a <q>different</q> problem: Below is a drawing of four dots connected by some lines.
        Is it possible to trace over each line once and only once (without lifting your pencil,
        starting and ending on a dot)?
      </p>
  
  
        <image width = "20%" xml:id="gt-bridges-graph">
          <latex-image>
            \begin{tikzpicture}[scale=0.9, yscale=.5]
              \draw (-1,-2) \v to [out=120, in=240] (-1,0) \v to [out=120, in=240] (-1,2) \v to [out=300, in=60] (-1,0) to [out=300, in=60] (-1,-2);
              \draw (1,0) \v -- (-1,2) (-1,0) -- (1,0) -- (-1,-2);
            \end{tikzpicture}
          </latex-image>
          <description>
            Three dots aligned in a vertical column left of a single dot on the right.  Lines connect the dot on the right to each dot on the left.  Among the dots on the left, two arced lines connect the bottom dot to the center dot, and two more connect the center dot to the top dot.
          </description>
        </image>
  
  
      <p>
        There is an obvious connection between these two problems.
        Any path in the dot and line drawing corresponds exactly to a path over the bridges of Königsberg.
      </p>
  
      <p>
        <idx><h>graph</h></idx>
        <idx><h>graph</h><h>vertex</h></idx>
        <idx><h>graph</h><h>edge</h></idx>
        <idx><h>graph</h><h>adjacent</h></idx>
        Pictures like this dot and line drawing are called <term>graphs</term> (although technically, the picture above is a <term>multigraph</term>).
        Graphs are made up of a collection of dots called <term>vertices</term>
            <idx><h>vertex</h></idx>
        and lines connecting those dots called <term>edges</term>.
            <idx><h>edge</h></idx>
        When two vertices are connected by an edge,
        we say they are <term>adjacent</term>.
            <idx><h>adjacent</h><h>vertices</h></idx>
        The nice thing about looking at graphs instead of pictures of rivers,
        islands, and bridges is that we now have a mathematical object to study.
        We have distilled the <q>important</q>
        parts of the bridge picture for the problem.
        It does not matter how big the islands are,
        what the bridges are made out of,
        if the river contains alligators, etc.
        All that matters is which land masses are connected to which other land masses,
        and how many times.
        This was the great insight Euler had.
      </p>
  
      <p>
        We will return to the question of finding paths through graphs in <xref ref="sec_gt-paths"/>.  In this section, we will explore various ways that graphs can be used to represent, or <em>model</em>, real-world problems.  Along the way, we will introduce some basic definitions, terminology, and notation that will be used in the rest of the chapter.

      </p>
      <worksheet xml:id="PA-gt-intro">
        <title>Preview Activity</title>
        <introduction>
          <p>
            To get a feel for graphs and the types of questions we want to ask about them, let's explore four examples of graphs.
          </p>
          <sbsgroup width="25%">
            <sidebyside>
              <p>
                <m>G_1</m>:
              </p>
              <p>
                <m>G_2</m>:
              </p>
            </sidebyside>
          <sidebyside valign="middle">
            <image>
              <shortdescription>Petersen graph: ten vertices each with three edges. Five of the vertices form a 5-pointed star, the other five a pentagon, edges connecting the vertices of the star and the pentagon.</shortdescription>
              <latex-image label="img-intro-petersen">
                \begin{tikzpicture}[scale=.5]
                \draw  (18:2) -- (90:2) -- (162:2)  -- (234:2) -- (306:2) -- cycle;
                \draw  (18:1) --  (162:1)  -- (306:1) -- (90:1) -- (234:1) --cycle;
                \foreach \x in {18, 90, 162, 234, 306}
                \draw  (\x:1) \v -- (\x:2) \v;
              \end{tikzpicture}
              </latex-image>
            </image>

            <image>
              <latex-image label="img-graph-labeled">
                \begin{tikzpicture}
                \coordinate (A) at (-1,0);
                \coordinate (B) at (-1, 1);
                \coordinate (C) at (0,1);
                \coordinate (D) at (0,0);
                \coordinate (E) at (1,0);
                \coordinate (F) at (1,1);
      
                \draw (A) node[below] {\(v_6\)} -- (B) node[above] {\(v_1\)} (C) node[above] {\(v_2\)}
                -- (D) node[below] {\(v_5\)} (E) node[below] {\(v_4\)} -- (F) node[above] {\(v_3\)} -- (D) -- (B) (A) -- (C) -- (E);
                \foreach \x in {(A), (B), (C), (D), (E), (F)}{
                \fill \x \v;
                }
                \end{tikzpicture}
              </latex-image>
                <shortdescription>
                A graph with six vertices arranged in two rows of three. The top vertices are labeled v1,
                v2, v3 from left to right. The bottom vertices are labeled v6, v5, v4 from left to right.
                Three edges connect each vertex in the top row to the vertex below it. Four more edges
                connect vertices on the top row and along the bottom row in two X configurations.
              </shortdescription>
            </image>
          </sidebyside>

          </sbsgroup>

          <sbsgroup width="35%">
            <sidebyside>
              <p>
                <m>G_3</m>:
              </p>
              <p>
                <m>G_4</m>:
              </p>
            </sidebyside>
            <sidebyside>
          <tabular>
            <col right="minor" halign="right"/><col/>
            <row header="yes" bottom="minor">
              <cell>vertex</cell><cell>adjacent to</cell>
            </row>
            <row>
              <cell><m>a</m></cell><cell><m>b, c</m></cell>
            </row>
            <row>
              <cell><m>b</m></cell><cell><m>a,f</m></cell>
            </row>
            <row>
              <cell><m>c</m></cell><cell><m>a, d, e</m></cell>
            </row>
            <row>
              <cell><m>d</m></cell><cell><m>c,e,f</m></cell>
            </row>
            <row>
              <cell><m>e</m></cell><cell><m>c,d</m></cell>
            </row>
            <row>
              <cell><m>f</m></cell><cell><m>b,d</m></cell>
            </row>
          </tabular>

          <p>
            <me>
              \begin{pmatrix}
                0 \amp 0 \amp 1 \amp 0 \amp 1 \amp 0 \\
                0 \amp 0 \amp 0 \amp 0 \amp 0 \amp 1 \\
                1 \amp 0 \amp 0 \amp 0 \amp 0 \amp 0 \\
                0 \amp 0 \amp 0 \amp 0 \amp 1 \amp 1 \\
                1 \amp 0 \amp 0 \amp 1 \amp 0 \amp 0 \\
                0 \amp 1 \amp 0 \amp 1 \amp 0 \amp 0
              \end{pmatrix}
            </me>
          </p>

          </sidebyside>
        </sbsgroup>
        
        <p>
          The graph <m>G_3</m> is presented as an <term>adjacency list</term> where each vertex gets a list of which other vertices it is adjacent to.  The graph <m>G_4</m> is presented as an <term>adjacency matrix</term> where the rows and columns correspond to the vertices and the entries are 1 if the vertices are adjacent and 0 otherwise.  Before answering the questions below, it might be helpful to draw a more traditional representation of these graphs.
        </p>
      </introduction>

      <exercise label="pa-gt-intro-1">
        <title>Counting vertices and edges</title>
        <webwork>
          <pg-code>
            
          </pg-code>
        
          <statement>
            <p>
              First, let's count the number of vertices and edges in each graph.
            </p>
            <p component="interactive">
              Number of vertices: <m>G_1</m>: <var name="10" width="5"/>; <m>G_2</m>: <var name="6" width="5"/>; <m>G_3</m>: <var name="6" width="5"/>; <m>G_4</m>: <var name="6" width="5"/>.
            </p>
            <p component="interactive">
              Number of edges: <m>G_1</m>: <var name="15" width="5"/>; <m>G_2</m>: <var name="7" width="5"/>; <m>G_3</m>: <var name="7" width="5"/>; <m>G_4</m>: <var name="5" width="5"/>.
            </p>
          </statement>
        </webwork>
      </exercise>
      <exercise label="pa-gt-intro-2">
        <title>Degree sequence</title>
        <webwork>
          <pg-code>
            
          </pg-code>
        
          <statement>
            <p>
              We call the number of edges <term>incident</term> to a particular vertex (i.e., the number of edges <q>coming out of</q> the vertex) the <term>degree</term> of the vertex.  A list of the degrees of all the vertices in non-increasing order is called a <term>degree sequence</term> for the graph.  Find the degree sequence for each graph.
            </p>
            <p component="interactive">
              <m>G_1</m> has degree sequence: <var name="List(3,3,3,3,3,3,3,3,3,3)" width="25"/>. 
            </p>
            
            <p component="interactive">
              <m>G_2</m> has degree sequence: <var name="List(3,3,2,2,2,2)" width="25"/>. 
            </p>
              
            <p component="interactive">
              <m>G_3</m> has degree sequence: <var name="List(3,3,2,2,2,2)" width="25"/>.
            </p>
              
            <p component="interactive">
              <m>G_4</m> has degree sequence: <var name="List(2, 2, 2, 2, 1 ,1)" width="25"/>.
            </p>
          </statement>
        </webwork>
      </exercise>

      <exercise label="pa-gt-intro-3">
        <title>Paths and cycles</title>
        
        
        <webwork>
          <pg-code>
            $cb1234 = CheckboxList([

                  "\(G_1\)",
                  "\(G_2\)",
                  "\(G_3\)",
                  "\(G_4\)", 

              "None of the above"
              ],
              [0, 1, 2, 3]
            );
            $cb123 = CheckboxList(
              [
                  "\(G_1\)",
                  "\(G_2\)",
                  "\(G_3\)",
                  "\(G_4\)",
              "None of the above"
              ],
              [0, 1, 2]
            );
          </pg-code>
        
          <introduction>
            <p>
              We often care about paths between vertices in a graph.  A graph is <term>connected</term> if there is a path between every pair of vertices.  Sometimes there is a path that starts at a vertex and eventually comes back to itself, which is called a <term>cycle</term>.  
            </p>
          </introduction>
          <task>
            <statement>
              <p>
                Which of the graphs are connected?
                
              </p>
              <p component="interactive">
                <var name="$cb1234" form="checkboxes"/>
              </p>
            </statement>
          </task>
          <task>
            <statement>
              <p>
                Which of the graphs contain cycles?

              </p>
              <p component="interactive">
                <var name="$cb123" form="checkboxes"/>
              </p>
            </statement>
          </task>
          <task>
            <statement>
              <p>
                Graphs that are connected and contain no cycles are called <term>trees</term>.  For each graph, how many edges must you remove to turn it into a tree? (If it is already a tree, the answer would be 0.)
              </p>
              <p component="interactive">
                <m>G_1</m>: <var name="6" width="5"/>; <m>G_2</m>: <var name="2" width="5"/>; <m>G_3</m>: <var name="2" width="5"/>; <m>G_4</m>: <var name="0" width="5"/>.
              </p>
            </statement>
          </task>
        </webwork>
      </exercise>
      <exercise label="pa-gt-intro-4">
        <title>Edge crossings</title>
        
        
        <webwork>
          <pg-code>
            $cb234 = CheckboxList([
            [
                "\(G_1\)","\(G_2\)","\(G_3\)","\(G_4\)" 
            ],
            "None of the above"
            ],
            [1, 2, 3]
          );
          </pg-code>
        
          <statement>
            <p>
              For which of the graphs is it possible to draw the graph in such a way that no edges cross?

            </p>
            <p component="interactive">
              <var name="$cb234" form="checkboxes"/>
            </p>
          </statement>
        </webwork>
      </exercise>
      <exercise label="pa-gt-intro-5">
        <title>Coloring vertices</title>
        
        
        <webwork>
          <pg-code>
            
          </pg-code>
        
          <statement>
            <p>
              Suppose we color each vertex of a graph so that adjacent vertices always have different colors.  The smallest number of colors needed to do this is called the <term>chromatic number</term> of the graph.  Find the chromatic number for each graph.
            </p>
            <p component="interactive">
              <m>G_1</m>: <var name="3" width="5"/>; <m>G_2</m>: <var name="2" width="5"/>; <m>G_3</m>: <var name="3" width="5"/>; <m>G_4</m>: <var name="2" width="5"/>.
            </p>
            <p>
              Note: If the graphs represented friendships between people, then the chromatic number would tell us the minimum number of groups we would need if we wanted to divide up everyone into groups of people who were not yet friends.
            </p>
          </statement>
        </webwork>
      </exercise>

    </worksheet>
    </subsection>




    <subsection>
      <title>What is a Graph?</title>
      
      

  <p>
    Before we start studying graphs,
    we need to agree upon what a graph is. While we almost always think of graphs as pictures
    (dots connected by lines),
    this is fairly ambiguous.
    Do the lines need to be straight?
    Does it matter how long the lines are or how large the dots are?
    Can there be two lines connecting the same pair of dots?
    Can one line connect three dots?
  </p>

  <p>
    The way we avoid ambiguities in mathematics is to provide concrete and rigorous <em>definitions</em>.
    Crafting good definitions is not easy, but it is incredibly important. The definition is the
    agreed-upon starting point from which all truths in mathematics proceed. Is there a graph with
    no edges? We have to look at the definition to see if this is possible. </p>

  <p> 
    We want our
    definition to be precise and unambiguous, but it also must agree with our intuition for the
    objects we are studying. It needs to be useful: We <em>could</em> define a graph to be a six-legged
    mammal, but that would not let us solve any problems about bridges. Instead, here is the (now)
    standard definition of a graph. 
  </p>

  <definition>
    <title>Graph</title>
    <idx><h>graph</h>
    </idx>
    <idx><h>graph</h><h>vertex</h>
    </idx>
    <idx><h>
        graph</h><h>edge</h>
    </idx>
    <idx><h>vertex</h>
    </idx>
    <idx><h>edge</h>
    </idx>
    <statement>
    <p> A <term>graph</term> is an
      ordered pair <m>G = (V, E)</m> consisting of a nonempty set <m>V</m> (called the <term>vertices</term>)
      and a set <m>E</m> (called the <term>edges</term>) of two-element subsets of <m>V</m>. </p>
    </statement>
  </definition>

  <p>
    Strange. Nowhere in the definition is there talk of dots or lines. From the definition, a graph
    could be <me>
      (\{a,b,c,d\}, \{\{a,b\}, \{a,c\}, \{b,c\}, \{b,d\}, \{c,d\}\})
    </me>. Here we have
    a graph with four vertices (the letters <m>a, b, c, d</m>) and five edges (the pairs <m>\{a,b\},
    \{a,c\}, \{b,c\}, \{b,d\}, \{c,d\})</m>). </p>

  <p>
  <idx><h>graph</h><h>drawing</h>
    </idx> Looking at sets and
    sets of 2-element sets is difficult to process. That is why we often draw a representation of
    these sets. We put a dot down for each vertex, and connect two dots with a line precisely when
    those two vertices are one of the 2-element subsets in our set of edges. Thus one way to draw
    the graph described above is this: </p>


    <image label="img-graph-labeled-sqaure-diag" width="20%">
			<latex-image>
      \begin{tikzpicture}[scale=0.7]
      \draw (-1,1) \vl{\(a\)} -- (1,1) \vr{\(b\)} (-1,1) -- (-1,-1) \vl{\(c\)} -- (1,-1) \vr{\(d\)}
      -- (1,1) -- (-1,-1);
      \end{tikzpicture}
    </latex-image>
      <description>
      Four vertices arranged in a square, with edges on the border of the square and one connecting
      the bottom left vertex to the top right vertex. Vertices are labeled a (top left), b (top
      right), c (bottom left) and d (bottom right).
    </description>
  </image>


  <p>
    However we could also have drawn the graph differently.
    For example either of these:
  </p>

  <sidebyside widths="20% 25%" margins="auto" valign="bottom">

    <image label="img-graph-labeled-alt1">

			<latex-image>
        \begin{tikzpicture}[scale=0.7]
        \draw (-1,1) \vl{\(a\)} -- (1,-1) \vr{\(b\)} (-1,1) -- (-1,-1) \vl{\(c\)} -- (1,1)
        \vr{\(d\)} -- (1,-1) -- (-1,-1);
        \end{tikzpicture}
      </latex-image>
      <description>
        Four vertices arranged in a square. Vertices are labeled a (top left), d (top right), c
        (bottom left) and b (bottom right). Edges connect a to c and b, d to b and c, and c to b.
      </description>
    </image>

    <image label="img-graph-labeled-alt2">
      <!-- TODO: fix the labels to make them have the same baseline. -->
			<latex-image>
        \begin{tikzpicture}[scale=0.7]
        \draw (-1.5,0) \v -- (-.5,0) \v (-1.5,0) .. controls (-.5,1) .. (.5,0) \v -- (1.5,0) \v ..
        controls (.5,1) .. (-.5,0) -- (.5,0);
        {\footnotesize
        \draw (-1.5, -.75) node[above]{\(a\)} (-.5,-.75) node[above]{\(b\)} (.5,-.75)
        node[above]{\(c\)} (1.5, -.75) node[above]{\(d\)};
        }
        \end{tikzpicture}
      </latex-image>
      <description>
        Four vertices arranged in a horizontal row, labeled a, b, c, and d from left to right. Edges
        connect each vertex to the one on its right. A curved edge connects a to c, and another
        curved edge connects b to d.
      </description>
    </image>

  </sidebyside>

  <p>
    We should be careful about what it means for two graphs to be <q>the same.</q> Actually, given our
    definition, this is easy: Are the vertex sets equal? Are the edge sets equal? We know what it
    means for sets to be equal, and graphs are nothing but a pair of two special sorts of sets. </p>

  <example>
  <idx><h>equality
        of graphs</h>
    </idx>
  <idx><h>graph</h><h>equality</h>
    </idx>
    <statement>
      <p> Are the graphs below equal? <me>
          G_1 = (\{a,b,c\}, \{\{a,b\}, \{b,c\}\}); \qquad G_2 = (\{a,b,c\}, \{\{a,c\}, \{c, b\}\})
        </me>.
      </p>
    </statement>
    <solution>
      <p> No. Here the vertex sets of each graph are equal, which is a
        good start. Also, both graphs have two edges. In the first graph, we have edges <m>\{a,b\}</m>
        and <m>\{b,c\}</m>, while in the second graph we have edges <m>\{a,c\}</m> and <m>\{c,b\}</m>. Of course, <m>\{b,c\} = \{c,b\}</m>, so that is not the problem. The issue is that <m>\{a,b\} \ne
        \{a,c\}</m>. Since the edge sets of the two graphs are not equal (as sets), the graphs are
        not equal (as graphs). </p>
    </solution>
  </example>

  <p> Even if two graphs are not <em>equal</em>,
    they might be <em>basically</em> the same. The graphs in the previous example could be drawn like
    this: </p>


    <image label="img-labeled-p2s" width="50%">
      <latex-image>
        \begin{tikzpicture}
        \draw (0,0) \vb{\footnotesize $a$} -- (1,0) \vb{\footnotesize $b$} -- (2,0) \vb{\footnotesize $c$};
        \node[above] at (0,.4) {$G_1$} ;
        \begin{scope}[xshift=3cm]
      \draw (2,0) \vb{\footnotesize $b$} -- (1,0) \vb{\footnotesize $c$} -- (0,0) \vb{\footnotesize $a$};
      \node[above] at (1, .5) {$G_2$};
      \end{scope}
      \end{tikzpicture}
    </latex-image>
      <description>
      Two graphs with three vertices each arranged in a horizontal row. Edges connect vertices to
      the vertex on either side of it. The graph on the left (G1) has vertices labeled a, b, c from
      left to right. The graph on the right (G2) has vertices labeled a, c, b from left to right.
    </description>
  </image>


  <p>
    Graphs that are basically the same (but perhaps not equal) are called <term>isomorphic</term>. We will
    give a precise definition of this term after a quick example: </p>

  <example>
    <statement>
      <p> Consider the graphs: <me>
          G_1 = (V_1, E_1) \text{ where }
          V_1 = \{a, b, c\} \text{ and } E_1 = \{\{a,b\}, \{a,c\}, \{b,c\}\};
        </me>

        <me>
        G_2 = (V_2, E_2) \text{ where }
          V_2 = \{u,v,w\} \text{ and }E_2 = \{\{u,v\}, \{u,w\}, \{v,w\}\}.
        </me>
      </p>

      <p>
        Are these graphs the same?
      </p>
    </statement>
    <solution>
      <p> The two graphs are NOT equal.
        It is enough to notice that <m>V_1 \ne V_2</m> since <m>a \in V_1</m> but <m>a \notin V_2</m>.
        However, both of these graphs consist of three vertices with edges connecting every pair of
        vertices. We can draw them as follows: </p>

      <sidebyside width="25%" margins="auto" valign="bottom">

        <image label="img-labeled-c3">

					<latex-image>
            \begin{tikzpicture}
            \draw (90:1) \va{\(a\)} -- (210:1) \vl{\(b\)} -- (-30:1) \vr{\(c\)} -- (90:1);
            \end{tikzpicture}
          </latex-image>
          <description>
            A graph with three vertices arranged as a triangle, with edges along the border of the
            triangle. The vertices are labeled a, b, and c.
          </description>
        </image>

        <image label="img-labeled-c3-alt">

					<latex-image>
            \begin{tikzpicture}
            \draw (90:1) \va{\(u\)} -- (210:1) \vl{\(v\)} -- (-30:1) \vr{\(w\)} -- (90:1);
            \end{tikzpicture}
          </latex-image>
          <description>
            A graph with three vertices arranged as a triangle, with edges along the border of the
            triangle. The vertices are labeled u, v, and w.
          </description>
        </image>

      </sidebyside>

      <p>
        Clearly we want to say these graphs are basically the same, so while they are not equal,
        they will be <em>isomorphic</em>. We can rename the vertices of one graph and get the second
        graph as the result. </p>
    </solution>
  </example>

  <p>
  <idx><h>graph</h><h>isomorphic (intuitive
    definition)</h>
    </idx> Intuitively, graphs are <term>isomorphic</term>
        <idx><h>isomorphic</h><h>intuitive
    definition</h>
    </idx> if they are basically the same, or better yet, if they are the same
    except for the names of the vertices. To make the concept of renaming vertices precise, we give
    the following definitions: </p>

  <definition>
      <idx><h>isomorphism of graphs</h>
    </idx>
      <idx><h>isomorphic</h><h>precise
        definition</h>
    </idx>
      <idx><h>graph</h><h>isomorphic (precise definition)</h>
    </idx>
    <statement>
    <p> An <term>isomorphism</term> between two graphs <m>G_1</m> and <m>G_2</m> is a bijection <m>f:V_1
      \to V_2</m> between the vertices of the graphs such that <m>\{a,b\}</m> is an edge in <m>G_1</m> if
      and only if <m>\{f(a), f(b)\}</m> is an edge in <m>G_2</m>. </p>

    <p> Two graphs are <term>isomorphic</term> if
      there is an isomorphism between them. In this case we write <m>G_1 \isom G_2</m>. </p>
    </statement>
  </definition>

  <p>
    An isomorphism is simply a function which renames the vertices.
    It must be a bijection so every vertex gets a new name.
    These newly named vertices must be connected by edges precisely when they were connected by
    edges with their old names.
  </p>

  <example>
    <idx><h>
        graph</h><h>equal vs. isomorphic</h>
    </idx>
    <statement>
      <p> Decide whether the graphs <m>G_1 = (V_1, E_1)</m>
        and <m>G_2 = (V_2, E_2)</m> are equal or isomorphic. </p>

      <p>
        <m>V_1 = \{a,b,c,d\}</m>, <m>E_1 =
        \{\{a,b\}, \{a,c\}, \{a,d\}, \{c,d\}\}</m>
      </p>

      <p>
        <m>V_2 = \{a,b,c,d\}</m>, <m>E_2 = \{\{a,b\},
        \{a,c\}, \{b,c\}, \{c,d\}\}</m>
      </p>
    </statement>
    <solution>
      <p> The graphs are NOT equal, since <m>\{a,d\}
        \in E_1</m> but <m>\{a,d\} \notin E_2</m>. However, since both graphs contain the same number
        of vertices and the same number of edges, they <em>might</em> be isomorphic (this is not enough in
        most cases, but it is a good start). </p>

      <p> We can try to build an isomorphism. How about we
        say <m>f(a) = b</m>, <m>f(b) = c</m>, <m>f(c) = d</m> and <m>f(d) = a</m>. This is definitely a
        bijection, but to make sure that the function is an isomorphism, we must make sure it <em>respects
        the edge relation</em>. In <m>G_1</m>, vertices <m>a</m> and <m>b</m> are connected by an edge. In <m>
        G_2</m>, <m>f(a) = b</m> and <m>f(b) = c</m> are connected by an edge. So far, so good, but we
        must check the other three edges. The edge <m>\{a,c\}</m> in <m>G_1</m> corresponds to <m>\{f(a),
        f(c)\} = \{b,d\}</m>, but here we have a problem. There is no edge between <m>b</m> and <m>d</m>
        in <m>G_2</m>. Thus <m>f</m> is NOT an isomorphism. </p>

      <p> Not all hope is lost, however. Just
        because <m>f</m> is not an isomorphism does not mean that there is no isomorphism at all. We
        can try again. At this point it might be helpful to draw the graphs to see how they should
        match up. </p>

      <sidebyside widths="23% 23%" margins="auto" valign="bottom">

        <image label="img-isom-g1">

						<latex-image>

            \begin{tikzpicture}
            \coordinate (a) at (90:1);
            \coordinate (b) at (0:1);
            \coordinate (c) at (-90:1);
            \coordinate (d) at (180:1);

            \draw (a) -- (b) (a) -- (c) (a) -- (d) (c) --(d);
            \draw (a) \va{\footnotesize $a$} (b) \vr{\footnotesize $b$} (c)\vb{\footnotesize $c$}
            (d) \vl{\footnotesize $d$};
            \node at (-1,1) {$G_1$:};
            \end{tikzpicture}

          </latex-image>
            <description>
            The graph G1 with four vertices arranged in a diamond. The top vertex (a) is connected
            to the three other vertices (d on the left, b on the right, and c below). There is one
            additional edge between d and c.
          </description>
        </image>

        <image label="img-isom-g2">

						<latex-image>
            \begin{tikzpicture}
            \coordinate (a) at (90:1);
            \coordinate (b) at (0:1);
            \coordinate (c) at (-90:1);
            \coordinate (d) at (180:1);

            \draw (a) -- (b) (a) -- (c) (b) -- (c) (c) --(d);
            \draw (a) \va{\footnotesize $a$} (b) \vr{\footnotesize $b$} (c)\vb{\footnotesize $c$}
            (d) \vl{\footnotesize $d$};
            \node at (-1,1) {$G_2$:};
            \end{tikzpicture}

          </latex-image>
            <description>
            The graph G2 with four vertices arranged in a diamond. The top vertex (a) is connected
            to the vertices c below and b on the right. There is two additional edges between d
            (left) and c and between b and c .
          </description>
        </image>

      </sidebyside>

      <p>
        Alternatively, notice that in <m>G_1</m>, the vertex <m>a</m> is adjacent to every other vertex.
        In <m>G_2</m>, there is also a vertex with this property: <m>c</m>. So build the bijection <m>g:V_1
        \to V_2</m> by defining <m>g(a) = c</m> to start with. Next, where should we send <m>b</m>? In <m>G_1</m>,
        the vertex <m>b</m> is only adjacent to vertex <m>a</m>. There is exactly one vertex like this in <m>
        G_2</m>, namely <m>d</m>. So let <m>g(b) = d</m>. As for the last two, in this example, we have a
        free choice: let <m>g(c) = b</m> and <m>g(d) = a</m> (switching these would be fine as well). </p>

      <p>
        We should check that this really is an isomorphism. It is definitely a bijection. We must
        make sure that the edges are respected. The four edges in <m>G_1</m> are <me>
          \{a,b\}, \{a,c\}, \{a,d\}, \{c,d\}
        </me>. </p>

      <p> Under the proposed
        isomorphism these become <me>
          \{g(a), g(b)\}, \{g(a), g(c)\}, \{g(a), g(d)\}, \{g(c), g(d)\}
        </me>
        <me>
        \{c,d\}, \{c,b\}, \{c,a\}, \{b,a\}
        </me>, which are precisely the edges
        in <m>G_2</m>. Thus <m>g</m> is an isomorphism, so <m>G_1 \cong G_2</m>
      </p>
    </solution>
  </example>

  <p>
    <idx><h>isomorphism
    class</h>
    </idx>
    <idx><h>graph</h><h>isomorphism class</h>
    </idx> Sometimes we will talk about a graph
    with a special name (like <m>K_n</m> or the <em>Petersen graph</em>) or perhaps draw a graph without
    any labels. In this case, we are really referring to <em>all</em> graphs isomorphic to any copy of
    that particular graph. A collection of isomorphic graphs is often called an <term>isomorphism class</term>.<fn> This is not unlike geometry, where we might have more than one copy of a particular
    triangle. There instead of <em>isomorphic</em> we say <em>congruent</em>. </fn></p>

  <p>
    There are other relationships between graphs that we care about,
    other than equality and being isomorphic.
    For example, compare the following pair of graphs:
  </p>

  <sidebyside width="20%" margins="auto">

    <image label="img-gt-intro-k6">

			<latex-image>
        \begin{tikzpicture}
        \foreach \x in {0,...,6}
        \draw (\x*60:1) \v -- (\x*60+60:1) -- (\x*60+180:1) -- cycle;
        \end{tikzpicture}
      </latex-image>
      <description>A
        graph with six vertices arranged in a hexagon, with edges between every possible pair of
        vertices.</description>
    </image>

    <image label="img-gt-intro-k4">

			<latex-image>
        \begin{tikzpicture}
        \foreach \x in {0,...,4}
        \draw (\x*90:1) \v -- (\x*90+90:1) -- (\x*90+180:1) -- cycle;
        \end{tikzpicture}
      </latex-image>
      <description>Four
        vertices arranged in a diamond, with edges between every possible pair of vertices.</description>
    </image>

  </sidebyside>

  <p>
    These are definitely not isomorphic,
    but notice that the graph on the right looks like it might be part of the graph on the left,
    especially if we draw it like this:
  </p>


  <image label="img-gt-intro-k4-in-k6" width="20%">

			 <latex-image>
      \begin{tikzpicture}
      \foreach \x in {0,...,6}
      \draw[very thin] (\x*60:1) \v -- (\x*60+60:1) -- (\x*60+180:1) -- cycle;
      \draw[very thick] (0:1) -- (60:1) -- (180:1) -- (240:1) -- (0:1) -- (180:1) (60:1) -- (240:1);
      \end{tikzpicture}
    </latex-image>
      <description>
      A graph with six vertices arranged in a hexagon with edges between every pair of vertices. Six
      edges are drawn in bold, forming a slanted rectangle with an X through it.
    </description>
  </image>



  <p>
    We would like to say that the smaller graph is a <em>subgraph</em> of the larger. </p>

  <p>
    We should give a careful definition of this.
    In fact, there are two reasonable notions for what a subgraph should mean.
  </p>

  <definition>
    <title>
      Subgraphs</title>
      <idx><h>subgraph</h>
    </idx>
      <idx><h>graph</h><h>subgraph</h>
    </idx>
      <idx><h>induced subgraph</h>
    </idx>
    <statement>
    <p>
      We say that <m>G' = (V', E')</m> is a <term>subgraph</term> of <m>G = (V, E)</m>, and write <m>G' \subseteq G</m>,
      provided <m>V' \subseteq V</m> and <m>E' \subseteq E</m>. </p>

    <p> We say that <m>G' = (V', E')</m> is an <term>induced
      subgraph</term> of <m>G = (V, E)</m> provided <m>V' \subseteq V</m> and every edge in <m>E</m> whose
      vertices are still in <m>V'</m> is also an edge in <m>E'</m>. </p>
    </statement>
  </definition>

  <p>
    Notice that every induced subgraph is also an ordinary subgraph,
    but not conversely.
    Think of a subgraph as the result of deleting some vertices and edges from the larger graph.
    For the subgraph to be an induced subgraph,
    we can still delete vertices,
    but now we only delete those edges that included the deleted vertices.
  </p>

  <example>
    <statement>
      <p>
        Consider the graphs:
      </p>

      <sidebyside widths="18% 18% 18% 18%" margins="auto" valign="bottom">
        <!-- valigns="bottom bottom bottom bottom"> -->

        <image label="img-subgraph-eg-g1">
          <latex-image>
            \begin{tikzpicture}[yscale=.8]
            \draw (-1,0) \vb{\footnotesize $a$} -- (0,0) \vb{\footnotesize $b$} -- (1,0)
            \vb{\footnotesize $c$} -- (.5,1) \vb{\footnotesize $e$} -- (0,0) -- (-.5,1)
            \vb{\footnotesize $d$} -- (0,2) \vb{\footnotesize $f$} -- (.5,1) -- (-.5,1) -- (-1,0);
            \node[below] at (0,-.5) {$G_1$};
            \end{tikzpicture}
          </latex-image>
          <description>
            The graph G1 consisting of six vertices arranged in a triangle. Starting with the bottom
            left vertex and traveling around the triangle clockwise, the vertices are labeled a, d,
            f, e, c, b. Edges connect vertices at the corners of the triangle to vertices along
            their edges of the triangle. These center vertices are also connected to each of the
            other center vertices.
          </description>
        </image>

        <image label="img-subgraph-eg-g2">

          <latex-image>
            \begin{tikzpicture}[yscale=.8]
            \draw (-1,0) \vb{\footnotesize $a$} -- (0,0) \vb{\footnotesize $b$} -- (1,0)
            \vb{\footnotesize $c$} (0,0) -- (-.5,1) \vb{\footnotesize $d$} (-.5,1) -- (-1,0);
            \node[below] at (0,-.5) {$G_2$};
            \end{tikzpicture}
          </latex-image>
          <description>
            The graph G2 of four vertices: a horizontal row of three, labeled a, b, c, and a vertex
            labeled d centered between and above a and b. Edges connect a, b, and d (forming a
            triangle) and a fourth edge connects b to c.
          </description>
        </image>

        <image label="img-subgraph-eg-g3">
          <latex-image>
            \begin{tikzpicture}[yscale=.8]
            \draw (-1,0) \vb{\footnotesize $a$} (0,0) \vb{\footnotesize $b$} -- (1,0)
            \vb{\footnotesize $c$} (0,0) -- (-.5,1) \vb{\footnotesize $d$} -- (0,2)
            \vb{\footnotesize $f$} (-1,0) -- (-.5,1);
            \node[below] at (0,-.5) {$G_3$};
            \end{tikzpicture}
          </latex-image>
          <description>
            The graph G3 of five vertices. Vertices a, b, and c are aligned in a horizontal row.
            Vertices d and f form a line with a in a line that slants up and to the right. There are
            edges between a and d, between d and f, between d and b, and between b and c.
          </description>
        </image>

        <image label="img-subgraph-eg-g4">

          <latex-image>
            \begin{tikzpicture}[yscale=.8]
            \draw (-1,0) \vb{\footnotesize $a$} -- (0,0) \vb{\footnotesize $b$} -- (1,0)
            \vb{\footnotesize $c$} -- (.5,1) (0,0) -- (-.5,1) \vb{\footnotesize $d$} -- (0,2)
            \vb{\footnotesize $f$} -- (.5,1) (-.5,1) -- (-1,0);
            \node[below] at (0,-.5) {$G_4$};
            \end{tikzpicture}
          </latex-image>
          <description>
            The graph G4 with five vertices: a, b, and c form a horizontal row, d and f line up with
            a in a line slanting up and the to the right. The vertices form a triangle, and edges
            are arranged to fill in the outside border of the triangle. Vertices d and b are also
            connected by and edge.
          </description>
        </image>

      </sidebyside>

      <p>
        Here both <m>G_2</m> and <m>G_3</m> are subgraphs of <m>G_1</m>. But only <m>G_2</m> is an <em>induced</em>
        subgraph. Every edge in <m>G_1</m> that connects vertices in <m>G_2</m> is also an edge in <m>G_2</m>.
        In <m>G_3</m>, the edge <m>\{a,b\}</m> is in <m>E_1</m> but not <m>E_3</m>, even though vertices <m>a</m>
        and <m>b</m> are in <m>V_3</m>. </p>

      <p> The graph <m>G_4</m> is NOT a subgraph of <m>G_1</m>, even though
        it looks like all we did is remove vertex <m>e</m>. The reason is that in <m>E_4</m> we have the
        edge <m>\{c,f\}</m>, but this is not an element of <m>E_1</m>, so we don't have the required <m>E_4
        \subseteq E_1</m>. </p>
    </statement>
  </example>

  <p>
    <idx><h>simple graph</h>
    </idx>
    <idx><h>graph</h><h>simple</h>
    </idx>
    Back to some basic graph theory definitions. Notice that all the graphs we have drawn above have
    the property that no pair of vertices is connected more than once, and no vertex is connected to
    itself. Graphs like these are sometimes called <term>simple</term>, although we will just call them <em>
    graphs</em>. This is because our definition of a graph says that the edges form a set of
    2-element subsets of the vertices. Remember that it doesn't make sense to say a set contains an
    element more than once. So no pair of vertices can be connected by an edge more than once. Also,
    since each edge must be a set containing two vertices, we cannot have a single vertex connected
    to itself by an edge. </p>

  <p>
  <idx><h>multigraph</h>
    </idx>
  <idx><h>graph</h><h>multigraph</h>
    </idx>
  <idx><h>multiset</h><h>relation
    to multigraph</h>
    </idx> That said, there are times we want to consider double (or more)
    edges and single-edge loops. For example, the <q>graph</q> we drew for the Bridges of Königsberg
    problem had double edges because there really are two bridges connecting a particular island to
    the near shore. We will call these objects <term>multigraphs</term>. This is a good name: A <em>multiset</em>
    is a set in which we are allowed to include a single element multiple times. </p>

  <p>
    <idx><h>graph</h><h>
    connected</h>
    </idx>
    <idx><h>connected graph</h>
    </idx> The graphs above are also <term>connected</term>:
    you can get from any vertex to any other vertex by following some path of edges. A graph that is
    not connected can be thought of as two separate graphs drawn close together. For example, the
    following graph is NOT connected because there is no path from <m>a</m> to <m>b</m>: </p>

    <image width="33%" label="ex-gt-non-connected">
			<latex-image>
      \begin{tikzpicture}
      \draw (-1.5,0) \vl{\footnotesize $a$} -- (-.5, 1) \v -- (.5, 0) \v -- (-.5,-1) \v -- cycle;
      \draw (-.5,0) \v -- (.5,1) \v -- (1.5,0) \vr{\footnotesize $b$} -- (.5,-1) \v -- cycle;
      \end{tikzpicture}
    </latex-image>
      <description>
      A graph consisting of eight vertices arranged in two overlapping diamonds, with edges forming
      the border of those diamonds. The vertex on the far left is labeled a and the vertex on the
      far right is labeled b.
    </description>
  </image>


  <p>
    <idx><h>complete
    graph</h>
    </idx>
    <idx><h>graph</h><h>complete</h>
    </idx>
    <idx><h sortby="kn"><m>K_n</m>
      </h>
    </idx> Vertices in a
    graph do not always have edges between them. If we add all possible edges, then the resulting
    graph is called <term>complete</term>. That is, a graph is complete if every pair of vertices is
    connected by an edge. Since a graph is determined completely by which vertices are adjacent to
    which other vertices, there is only one complete graph with a given number of vertices. We give
    these a special name: <m>K_n</m>

    <notation>
      <usage><m>K_n</m>
      </usage>
      <description>the complete graph on <m>n</m> vertices</description>
    </notation>
    is the complete graph on <m>n</m> vertices. </p>

  <p>
  <idx><h>vertex degree</h>
    </idx>
  <idx><h>degree</h>
    </idx>
  <idx><h>
    graph</h><h>degree</h>
    </idx> Each vertex in <m>K_n</m> is adjacent to <m>n-1</m> other vertices. We
    call the number of edges emanating from a given vertex the <term>degree</term> of that vertex. So
    every vertex in <m>K_n</m> has degree <m>n-1</m>. How many edges does <m>K_n</m> have? One might think
    the answer should be <m>n(n-1)</m>, since we count <m>n-1</m> edges <m>n</m> times (once for each
    vertex). However, each edge is incident to 2 vertices, so we counted every edge exactly twice.
    Thus there are <m>n(n-1)/2</m> edges in <m>K_n</m>. Alternatively, we can say there are <m>{n \choose 2}</m>
    edges, since to draw an edge we must choose 2 of the <m>n</m> vertices. </p>

  <p> In general, if we know
    the degrees of all the vertices in a graph, we can find the number of edges. The sum of the
    degrees of all vertices will always be <em>twice</em> the number of edges, since each edge adds to
    the degree of two vertices. Notice this means that the sum of the degrees of all vertices in any
    graph must be even! </p>
  
  <p>
    This is our first example of a general result about all graphs. It seems innocent enough, but we
    will use it to prove all sorts of other statements. So let's give it a name and state it
    formally.
  </p>
  
  <lemma xml:id="lem-handshake">
    <title>Handshake
      Lemma</title> 
    <idx><h>handshake lemma</h>
    </idx>   
    <idx><h>degree</h><h>sum formula</h>
    </idx>
    <idx><h>counting</h><h>edges
        in a graph</h>
    </idx>
    <statement>
      <p>
        In any graph, the sum of the degrees of vertices in the graph is always twice the number of
        edges.
      </p>
    </statement>
  </lemma>
  
  <p>
    The handshake lemma<fn>A <em>lemma</em> is a mathematical statement that is primarily of importance in
    that it is used to establish other results.</fn> is sometimes called the <em>degree sum formula</em>,
    and can be written symbolically as <me>
      \sum_{v\in V} d(v) = 2e
    </me>. Here we are using the notation <m>d(v)</m> for the
    degree of the vertex <m>v</m>. </p>
  
  <p>
    <idx><h>degree</h><h>degree sequence</h>
    </idx>
    <idx><h>graph</h><h>degree sequence</h>
    </idx>
    <idx><h>vertex
    degree</h><h>degree sequence</h>
    </idx> One use for the lemma is to actually find the number of
    edges in a graph. To do this, you must be given the <term>degree sequence</term> for the graph (or be
    able to find it from other information). This is a list of every degree of every vertex in the
    graph, generally written in non-increasing order. </p>
  
  <example>
    <statement>
      <p> How many vertices and edges must a graph
        have if its degree sequence is <me>
          (4, 4, 3, 3, 3, 2, 1)
        </me>? </p>
    </statement>
    <solution>
      <p> The number of vertices is easy to find. It is the number of degrees in the sequence: 7. To find the number
        of edges, we compute the degree sum 
        <me>
          4 + 4 + 3 + 3 + 3 + 2 + 1 = 20
        </me>, so the number of edges is half
        this: 10. </p>
    </solution>
  </example>

  <p>
    The handshake lemma also tells us what is not possible.
  </p>

  <example>
    <statement>
      <p>
        At a recent math seminar, 9 mathematicians greeted each other by shaking hands.
        Is it possible that each mathematician shook hands with exactly 7 people at the seminar?
      </p>
    </statement>
    <solution>
      <p>
        It seems like this should be possible. Each mathematician chooses one person to not shake
        hands with. But this cannot happen. We are asking whether a graph with 9 vertices can have
        each vertex have degree 7. If such a graph existed, the sum of the degrees of the vertices
        would be <m>9\cdot 7 = 63</m>. This would be twice the number of edges (handshakes) resulting
        in a graph with <m>31.5</m> edges. That is impossible. Thus at least one (in fact an odd
        number) of the mathematicians must have shaken hands with an <em>even</em> number of people at
        the seminar. </p>
    </solution>
  </example>

  <p> We can generalize the previous example to get
    the following proposition.<fn>A <term>proposition</term> is a general statement in mathematics, similar to
    a theorem, although generally of lesser importance.</fn>
  </p>
  
  <proposition xml:id="prop-evensum">
    <statement>
      <p>
        In any graph, the number of vertices with odd degree must be even.
      </p>
    </statement>
    <proof>
      <p>
        Suppose there were a graph with an odd number of vertices with odd degree. Then the sum of
        the degrees in the graph would be odd, which is impossible, by the handshake lemma.
      </p>
    </proof>
  </proposition>

  <p>
    We will consider further applications of the handshake lemma in the exercises.
  </p>

  <p>
    <idx><h>bipartite
    graph</h>
    </idx>
    <idx><h>graph</h><h>bipartite</h>
    </idx>
    <idx><h>complete bipartite graph</h>
    </idx> One
    final definition: We say a graph is <term>bipartite</term> if the vertices can be divided into two
    sets, <m>A</m> and <m>B</m>, with no two vertices in <m>A</m> adjacent and no two vertices in <m>B</m>
    adjacent. The vertices in <m>A</m> can be adjacent to some or all of the vertices in <m>B</m>. If each
    vertex in <m>A</m> is adjacent to all the vertices in <m>B</m>, then the graph is a <term>complete bipartite
    graph</term>, and gets a special name: <m>K_{m,n}</m>, where <m>|A| = m</m> and <m>|B| = n</m>. 
    <!-- The graph in the houses and utilities puzzle is <m>K_{3,3}</m>. -->
    </p> 

  <!-- TODO: give picture example of bipartite and not bipartite graphs -->
  <paragraphs>
    <title>Named Graphs</title>
    <idx><h>complete graph</h>
    </idx>
    <idx><h>complete
        bipartite graph</h>
    </idx>
    <idx><h>cycle</h><h>type of graph</h>
    </idx>
    <idx><h>path</h><h>type of graph</h>
    </idx>
    <idx><h>
        graph</h><h>complete</h>
    </idx>
    <idx><h>graph</h><h>complete bipartite</h>
    </idx>
    <idx><h>graph</h><h>path</h>
    </idx>
    <idx><h>
        graph</h><h>cycle</h>
    </idx>
    <p> Some graphs are used more than others and get special names. <dl width="narrow">
        <li>
          <title><m>
      K_n</m>
          </title>
          <p> The complete graph on <m>n</m> vertices. 

          </p>
        </li>

        <li>
          <title><m>
      K_{m,n}</m>
          </title>
          <p> The complete bipartite graph with sets of <m>m</m> and <m>n</m>
      vertices. <notation>
              <usage><m>K_{m,n}</m>
              </usage>
              <description>the complete bipartite graph of <m>m</m> and <m>n</m>
      vertices</description>
            </notation>

          </p>
        </li>

        <li>
          <title><m>C_n</m>
          </title>
          <p>
      The cycle on <m>n</m> vertices, just one big loop. <notation>
              <usage><m>C_n</m>
              </usage>
              <description>the cycle on <m>n</m>
      vertices</description>
            </notation>

          </p>
        </li>

        <li>
          <title><m>P_n</m>
          </title>
          <p>
      The path on <m>n+1</m> vertices (so <m>n</m> edges), just one long path. <notation>
              <usage><m>P_n</m>
              </usage>
              <description>the
      path on <m>n+1</m> vertices</description>
            </notation>

          </p>
        </li>
      </dl>
    </p>

    <sidebyside widths="18% 20% 15% 24%" margins="auto" valign="bottom">

      <image label="img-gt-intro-k5">

				<latex-image>
          \begin{tikzpicture}[scale=1]
          \path (0,0) +(18:1) coordinate (a);
          \path (0,0) +(90:1) coordinate (b);
          \path (0,0) +(162:1) coordinate (c);
          \path (0,0) +(234:1) coordinate (d);
          \path (0,0) +(306:1) coordinate (e);
          \draw (a) \v -- (b) \v -- (c) \v -- (d) \v -- (e) \v -- (a) -- (c) -- (e) -- (b) -- (d) --
          (a);
          \draw (0,-1.35) node[below]{ \(K_5\)};
          \end{tikzpicture}
        </latex-image>
        <description>The
          graph K5: five vertices arranged in a pentagon. Each vertex is connected to each other
          vertex by an edge.</description>
      </image>

      <image label="img-gt-intro-k-2-3">

				<latex-image>
          \begin{tikzpicture}[scale=.6, xscale=1.5]
          \draw (-1, 0) \v -- (-.5,2) \v -- (0,0) \v -- (.5, 2) \v -- (1,0) \v -- (-.5,2) (.5,2) --
          (-1,0);
          \draw (0,-.5) node[below]{ \(K_{2,3}\)};
          \end{tikzpicture}
        </latex-image>
        <description>The
          graph K2,3: a row of two vertices on top and three on bottom. Each vertex in the top row
          is connected to each vertex on the bottom row.</description>
      </image>

      <image label="img-gt-intro-c6">

				<latex-image>
          \begin{tikzpicture}[scale=.6]
          \draw (0:1) \v -- (60:1) \v -- (120:1) \v -- (180:1) \v -- (240:1) \v -- (300:1) \v --
          cycle;
          \draw (270:1.5) node[below]{ \(C_6\)};
          \end{tikzpicture}
        </latex-image>
        <description>The
          graph C6: a cycle of six vertices connected by six edges arranged as a hexagon.</description>
      </image>

      <image label="img-gt-intro-p5" oldPERMID="gPu">

				<latex-image>
          \begin{tikzpicture}[scale=.6]
          \draw (-2,0) \v -- (-1,.5) \v -- (0,0) \v -- (1,.75) \v -- (.5,1.5) \v -- (2,2) \v;
          \draw (0,-.5) node[below]{ \(P_5\)};
          \end{tikzpicture}
        </latex-image>
        <description>The
          graph P5: six vertices connected by five edges. The first and last vertex have one edge,
          each other vertex has two edges (connecting to the previous and next vertex on the path).</description>
      </image>

    </sidebyside>
  </paragraphs>

  <paragraphs oldPERMID="drY">
    <title>Graph
      Theory Definitions</title>
    <p> There are a lot of definitions to keep track of in graph theory.
      Here is a glossary of the terms we have already used and will soon encounter. <dl width="medium">
        <li>
        <idx><h>graph</h>
          </idx>
        <idx><h>
      vertex</h>
          </idx>
        <idx><h>edge</h>
          </idx>
          <title>Graph</title>
          <p> A collection of <term>vertices</term>,
      some of which are connected by <term>edges</term>. More precisely, a pair of sets <m>V</m> and <m>E</m>,
      where <m>V</m> is a set of vertices and <m>E</m> is a set of 2-element subsets of <m>V</m>. </p>
        </li>

        <li>
          <title>
      Adjacent</title>
        <idx><h>graph</h><h>adjacent</h>
          </idx>
        <idx><h>adjacent</h><h>edges</h>
          </idx>
        <idx><h>
      adjacent</h><h>vertices</h>
          </idx>
          <p> Two vertices are <term>adjacent</term> if they are
      connected by an edge. Two edges are <term>adjacent</term> if they share a vertex. </p>
        </li>

        <li>
          <title>Bipartite
      graph</title>
          <idx><h>graph</h><h>bipartite</h>
          </idx>
        <idx><h>bipartite graph</h>
          </idx>
          <p>
            A graph for which it is possible to divide the vertices into two disjoint sets such that
      there are no edges between any two vertices in the same set.
          </p>
        </li>

        <li>
          <title>Complete
      bipartite graph</title>
          <idx>
            <h>graph</h>
            <h>complete bipartite</h>
          </idx>

          <idx><h>complete bipartite graph</h>
          </idx>
          <p>
      A bipartite graph for which every vertex in the first set is adjacent to every vertex in the
      second set.
          </p>
        </li>

        <li>
          <title>Complete
      graph</title>
        <idx><h>complete graph</h>
          </idx>
        <idx>
          <h>graph</h>
          <h>complete</h>
          </idx>

          <p>
            A graph in which every pair of vertices is adjacent.
          </p>
        </li>

        <li>
          <title>
      Connected</title>
              <idx><h>connected graph</h>
          </idx>
              <idx><h>graph</h><h>connected</h>
          </idx>
          <p> A
      graph is <term>connected</term> if there is a path from any vertex to any other vertex. </p>
        </li>

        <li>
          <title>Chromatic
      number</title>
          <idx><h>chromatic number</h>
          </idx>
          <idx>
            <h>graph</h>
            <h>chromatic number</h>
          </idx>

          <p>
      The minimum number of colors required in a proper vertex coloring of the graph.
          </p>
        </li>

        <li>
          <title>
      Cycle</title>
        <idx><h>cycle</h>
          </idx>
        <idx>
          <h>graph</h>
          <h>cycle</h>
          </idx>

          <p>
            A path (see below) that starts and stops at the same vertex, but contains no other
      repeated vertices.
          </p>
        </li>

        <li>
          <title>Degree
      of a vertex</title>
          <idx><h>vertex degree</h>
          </idx>
          <idx><h>degree</h>
          </idx>
          <idx><h>graph</h><h>degree</h>
          </idx>
          <p>
      The number of edges incident to a vertex.
          </p>
        </li>

        <li>
          <title>Euler
            trail</title>
          <idx><h>Euler trail</h>
          </idx>
          <idx><h>graph</h><h>Euler trail</h>
          </idx>
          <p>
            A walk which uses each edge exactly once.
          </p>
        </li>

        <li>
          <title>Euler
      circuit</title>
        <idx><h>Euler circuit</h>
          </idx>
        <idx>
          <h>graph</h>
          <h>Euler circuit</h>
          </idx>

          <p>
            An Euler trail which starts and stops at the same vertex.
          </p>
        </li>

        <li>
          <title>
      Multigraph</title>
        <idx><h>multigraph</h>
          </idx>
        <idx><h>graph</h><h>multigraph</h>
          </idx>
          <p> A <term>
      multigraph</term> is just like a graph but can contain multiple edges between two vertices as
      well as single edge loops (that is an edge from a vertex to itself). </p>
        </li>

        <li>
          <title>Path</title>
              <idx><h>
      path</h>
          </idx>
              <idx><h>cycle</h>
          </idx>
          <idx><h>graph</h><h>path</h>
          </idx>
          <idx><h>graph</h><h>
      cycle</h>
          </idx>

          <p> A <term>path</term> is a walk that doesn't repeat any vertices (or edges)
      except perhaps the first and last. If a path starts and ends at the same vertex, it is called
      a <term>cycle</term>. </p>
        </li>

        <li>
          <title>Planar</title>
          <idx><h>planar graph</h>
          </idx>
          <idx><h>graph</h><h>planar</h>
          </idx>
          <p>
      A graph which can be drawn (in the plane) without any edges crossing.
          </p>
        </li>

        <li>
          <title>
      Subgraph</title>
          <idx><h>subgraph</h>
          </idx>
          <idx><h>induced subgraph</h>
          </idx>
          <idx><h>graph</h><h>
      subgraph</h>
          </idx>
          <idx><h>graph</h><h>induced subgraph</h>
          </idx>
          <p> We say that <m>H</m> is
      a <term>subgraph</term> of <m>G</m> if every vertex and edge of <m>H</m> is also a vertex or edge of <m>G</m>.
      We say <m>H</m> is an <term>induced</term> subgraph of <m>G</m> if every vertex of <m>H</m> is a vertex of <m>G</m>
      and each pair of vertices in <m>H</m> are adjacent in <m>H</m> if and only if they are adjacent in <m>G</m>
      . </p>
        </li>

        <li>
          <title>Tree</title>
        <idx><h>tree</h>
          </idx>
        <idx><h>forest</h>
          </idx>
        <idx><h>
              leaf</h>
          </idx>
        <idx><h>graph</h><h>tree</h>
          </idx>
        <idx><h>graph</h><h>forest</h>
          </idx>
        <idx><h>
      graph</h><h>leaf</h>
          </idx>
          <p> A connected graph with no cycles. (If we remove the
      requirement that the graph is connected, the graph is called a <term>forest</term>.) The vertices in
      a tree with degree 1 are called <term>leaves</term>. </p>
        </li>

        <li>
          <title>Vertex coloring</title>
              <idx><h>vertex
      coloring</h>
          </idx>
              <idx><h>proper vertex coloring</h>
          </idx>
              <idx><h>graph</h><h>vertex coloring</h>
          </idx>
          <p>
      An assignment of colors to each of the vertices of a graph. A vertex coloring is <term>proper</term>
      if adjacent vertices are always colored differently. </p>
        </li>

        <li>
          <title>Walk</title>
        <idx><h>walk</h>
          </idx>
        <idx><h>
      trail</h>
          </idx>
        <idx><h>path</h>
          </idx>
        <idx><h>graph</h><h>walk</h>
          </idx>
        <idx><h>graph</h><h>
      trail</h>
          </idx>
        <idx><h>graph</h><h>path</h>
          </idx>
          <p> A sequence of vertices such that
      consecutive vertices (in the sequence) are adjacent (in the graph). A walk in which no edge is
      repeated is called a <term>trail</term>, and a trail in which no vertex is repeated (except possibly
      the first and last) is called a <term>path</term>. </p>
        </li>
      </dl>
    </p>
  </paragraphs>


  <!-- <example>
    <statement>
      <p>
        Al, Bob, Cam, Dan,
        and Euler are all members of the social networking website <em>Facebook</em>.
        The site allows members to be <q>friends</q> with each other.
        It turns out that Al and Cam are friends, as are Bob and Dan.
        Euler is friends with everyone.
        Represent this situation with a graph.
      </p>
    </statement>
    <solution>
      <p>
        Each person will be represented by a vertex and each friendship will be represented by an edge.
        That is, two vertices will be adjacent
        (there will be an edge between them)
        if and only if the people represented by those vertices are friends.
        We get the following graph:
      </p>



        <image width="20%" xml:id="gt-facebook">

          <latex-image>
            \begin{tikzpicture}[scale=0.7]
              \draw(-1, 0) \vl{C} &mdash;&mdash; (0,1) \vb{E} &mdash;&mdash; (-1,2) \vl{A} &mdash;&mdash; (-1,0)(1,0) \vr{D} &mdash;&mdash; (0,1)  &mdash;&mdash; (1,2) \vr{B} &mdash;&mdash; (1,0);
            \end{tikzpicture}
          </latex-image>
          <shortdescription>
            A graph with 4 vertices forming a square and fifth vertex centered between them.  Vertices are labeled: A (top left), B (top right), C (bottom right), D (bottom left), and E (center).
          </shortdescription>
        </image>

    </solution>
  </example>

  <example>
    <idx><h>houses and utilities puzzle</h></idx>
    <idx><h>puzzle</h><h>houses and utilities</h></idx>
    <statement>
      <p>
        Each of three houses must be connected to each of three utilities.
        Is it possible to do this without any of the utility lines crossing?
      </p>
    </statement>
    <solution>
      <p>
        We will answer this question in <xref ref="sec_gt-planar"/>.
        For now, notice how we would ask this question in the context of graph theory.
        We are really asking whether it is possible to redraw the graph below without any edges crossing.
        Think of the top row as the houses,
        bottom row as the utilities.
      </p>

      <image width="20%" xml:id="gt-k33">

        <latex-image>
          \begin{tikzpicture}[yscale=.8]
            \draw (-1,1) \v  &mdash;&mdash; (-1,0)\v   &mdash;&mdash; (0,1) \v  &mdash;&mdash; (0,0) \v  &mdash;&mdash; (1,1) \v  &mdash;&mdash; (1,0) \v  &mdash;&mdash; (0,1)  &mdash;&mdash; (-1,0)  &mdash;&mdash; (1,1) (1,0)  &mdash;&mdash; (-1,1)  &mdash;&mdash; (0,0);
          \end{tikzpicture}
        </latex-image>
        <shortdescription>
          A graph with six vertices arranged in two rows of three.  There are nine edges, connecting each dot in the top row to each dot in the bottom row.
        </shortdescription>
      </image>

    </solution>
  </example> -->
</subsection>


  <reading-questions xml:id="rqs-gt-intro">
    <exercise label="rq-gt-intro-same">
      <statement>
        <p>
          Is there more than one graph with five vertices and six edges? Explain what this question
          even means and how you would answer it.
        </p>
      </statement>
      <response/>
    </exercise>

    <exercise label="ww-rq-gt-intro-edgecount">
      <webwork>
        <statement>
          <p>
            If a graph has 10 vertices, each with degree 4, how many edges does it have?
          </p>
          <p component="interactive">
            Number of edges: <var name="'20'" width="5"/>
          </p>
        </statement>
      </webwork>
    </exercise>

    <exercise label="rq-gt-intro-q">
      <statement>
        <p> 
          What questions do you have after reading this section? Write at least one question about the content of this section that you are curious about. 
        </p>
      </statement>
      <response />
    </exercise>
  </reading-questions>

  <xi:include href="practice/gt-intro.ptx"/>
  <xi:include href="exercises/gt-intro.ptx"/>
</section>
